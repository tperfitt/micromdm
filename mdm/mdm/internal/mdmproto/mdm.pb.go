// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mdm.proto

package mdmproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResultPayload_Status int32

const (
	ResultPayload_Acknowledged       ResultPayload_Status = 0
	ResultPayload_Error              ResultPayload_Status = 1
	ResultPayload_CommandFormatError ResultPayload_Status = 2
	ResultPayload_Idle               ResultPayload_Status = 3
	ResultPayload_NotNow             ResultPayload_Status = 4
)

var ResultPayload_Status_name = map[int32]string{
	0: "Acknowledged",
	1: "Error",
	2: "CommandFormatError",
	3: "Idle",
	4: "NotNow",
}

var ResultPayload_Status_value = map[string]int32{
	"Acknowledged":       0,
	"Error":              1,
	"CommandFormatError": 2,
	"Idle":               3,
	"NotNow":             4,
}

func (x ResultPayload_Status) String() string {
	return proto.EnumName(ResultPayload_Status_name, int32(x))
}

func (ResultPayload_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{66, 0}
}

type CommandPayload struct {
	CommandUuid          string   `protobuf:"bytes,1,opt,name=command_uuid,json=commandUuid,proto3" json:"command_uuid,omitempty"`
	Command              *Command `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandPayload) Reset()         { *m = CommandPayload{} }
func (m *CommandPayload) String() string { return proto.CompactTextString(m) }
func (*CommandPayload) ProtoMessage()    {}
func (*CommandPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{0}
}
func (m *CommandPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandPayload.Merge(m, src)
}
func (m *CommandPayload) XXX_Size() int {
	return m.Size()
}
func (m *CommandPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandPayload.DiscardUnknown(m)
}

var xxx_messageInfo_CommandPayload proto.InternalMessageInfo

func (m *CommandPayload) GetCommandUuid() string {
	if m != nil {
		return m.CommandUuid
	}
	return ""
}

func (m *CommandPayload) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

type Command struct {
	RequestType string `protobuf:"bytes,1,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	//
	//Request Types that do not have additional fields:
	//- ProfileList
	//- ProvisioningProfileList
	//- CertificateList",
	//- SecurityInfo
	//- RestartDevice
	//- ShutDownDevice
	//- StopMirroring
	//- ClearRestrictionsPassword
	//- UserList
	//- LogOutUser
	//- PlayLostModeSound
	//- DisableLostMode
	//- DeviceLocation
	//- ManagedMediaList
	//- DeviceConfigured
	//- AvailableOSUpdates
	//- NSExtensionMappings
	//- EnableRemoteDesktop
	//- DisableRemoteDesktop
	//- ActivationLockBypassCode
	//
	// Types that are valid to be assigned to Request:
	//	*Command_InstallProfile
	//	*Command_RemoveProfile
	//	*Command_InstallProvisioningProfile
	//	*Command_RemoveProfisioningProfile
	//	*Command_InstalledApplicationList
	//	*Command_DeviceInformation
	//	*Command_DeviceLock
	//	*Command_ClearPasscode
	//	*Command_EraseDevice
	//	*Command_RequestMirroring
	//	*Command_Restrictions
	//	*Command_UnlockUserAccount
	//	*Command_DeleteUser
	//	*Command_EnableLostMode
	//	*Command_InstallApplication
	//	*Command_AccountConfiguration
	//	*Command_ApplyRedemptionCode
	//	*Command_ManagedApplicationList
	//	*Command_RemoveApplication
	//	*Command_InviteToProgram
	//	*Command_ValidataApplications
	//	*Command_InstallMedia
	//	*Command_RemoveMedia
	//	*Command_Settings
	//	*Command_ManagedApplicationConfiguration
	//	*Command_ManagedApplicationAttributes
	//	*Command_ManagedApplicationFeedback
	//	*Command_SetFirmwarePassword
	//	*Command_VerifyFirmwarePassword
	//	*Command_SetAutoAdminPassword
	//	*Command_ScheduleOsUpdate
	//	*Command_ScheduleOsUpdateScan
	//	*Command_ActiveNsExtensions
	//	*Command_RotateFilevaultKey
	//	*Command_InstallEnterpriseApplication
	//	*Command_SetBootstrapToken
	Request              isCommand_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{1}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

type isCommand_Request interface {
	isCommand_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Command_InstallProfile struct {
	InstallProfile *InstallProfile `protobuf:"bytes,2,opt,name=install_profile,json=installProfile,proto3,oneof" json:"install_profile,omitempty"`
}
type Command_RemoveProfile struct {
	RemoveProfile *RemoveProfile `protobuf:"bytes,3,opt,name=remove_profile,json=removeProfile,proto3,oneof" json:"remove_profile,omitempty"`
}
type Command_InstallProvisioningProfile struct {
	InstallProvisioningProfile *InstallProvisioningProfile `protobuf:"bytes,4,opt,name=install_provisioning_profile,json=installProvisioningProfile,proto3,oneof" json:"install_provisioning_profile,omitempty"`
}
type Command_RemoveProfisioningProfile struct {
	RemoveProfisioningProfile *RemoveProvisioningProfile `protobuf:"bytes,5,opt,name=remove_profisioning_profile,json=removeProfisioningProfile,proto3,oneof" json:"remove_profisioning_profile,omitempty"`
}
type Command_InstalledApplicationList struct {
	InstalledApplicationList *InstalledApplicationList `protobuf:"bytes,6,opt,name=installed_application_list,json=installedApplicationList,proto3,oneof" json:"installed_application_list,omitempty"`
}
type Command_DeviceInformation struct {
	DeviceInformation *DeviceInformation `protobuf:"bytes,7,opt,name=device_information,json=deviceInformation,proto3,oneof" json:"device_information,omitempty"`
}
type Command_DeviceLock struct {
	DeviceLock *DeviceLock `protobuf:"bytes,8,opt,name=device_lock,json=deviceLock,proto3,oneof" json:"device_lock,omitempty"`
}
type Command_ClearPasscode struct {
	ClearPasscode *ClearPasscode `protobuf:"bytes,9,opt,name=clear_passcode,json=clearPasscode,proto3,oneof" json:"clear_passcode,omitempty"`
}
type Command_EraseDevice struct {
	EraseDevice *EraseDevice `protobuf:"bytes,10,opt,name=erase_device,json=eraseDevice,proto3,oneof" json:"erase_device,omitempty"`
}
type Command_RequestMirroring struct {
	RequestMirroring *RequestMirroring `protobuf:"bytes,11,opt,name=request_mirroring,json=requestMirroring,proto3,oneof" json:"request_mirroring,omitempty"`
}
type Command_Restrictions struct {
	Restrictions *Restrictions `protobuf:"bytes,12,opt,name=restrictions,proto3,oneof" json:"restrictions,omitempty"`
}
type Command_UnlockUserAccount struct {
	UnlockUserAccount *UnlockUserAccount `protobuf:"bytes,13,opt,name=unlock_user_account,json=unlockUserAccount,proto3,oneof" json:"unlock_user_account,omitempty"`
}
type Command_DeleteUser struct {
	DeleteUser *DeleteUser `protobuf:"bytes,14,opt,name=delete_user,json=deleteUser,proto3,oneof" json:"delete_user,omitempty"`
}
type Command_EnableLostMode struct {
	EnableLostMode *EnableLostMode `protobuf:"bytes,15,opt,name=enable_lost_mode,json=enableLostMode,proto3,oneof" json:"enable_lost_mode,omitempty"`
}
type Command_InstallApplication struct {
	InstallApplication *InstallApplication `protobuf:"bytes,16,opt,name=install_application,json=installApplication,proto3,oneof" json:"install_application,omitempty"`
}
type Command_AccountConfiguration struct {
	AccountConfiguration *AccountConfiguration `protobuf:"bytes,17,opt,name=account_configuration,json=accountConfiguration,proto3,oneof" json:"account_configuration,omitempty"`
}
type Command_ApplyRedemptionCode struct {
	ApplyRedemptionCode *ApplyRedemptionCode `protobuf:"bytes,18,opt,name=apply_redemption_code,json=applyRedemptionCode,proto3,oneof" json:"apply_redemption_code,omitempty"`
}
type Command_ManagedApplicationList struct {
	ManagedApplicationList *ManagedApplicationList `protobuf:"bytes,19,opt,name=managed_application_list,json=managedApplicationList,proto3,oneof" json:"managed_application_list,omitempty"`
}
type Command_RemoveApplication struct {
	RemoveApplication *RemoveApplication `protobuf:"bytes,20,opt,name=remove_application,json=removeApplication,proto3,oneof" json:"remove_application,omitempty"`
}
type Command_InviteToProgram struct {
	InviteToProgram *InviteToProgram `protobuf:"bytes,21,opt,name=invite_to_program,json=inviteToProgram,proto3,oneof" json:"invite_to_program,omitempty"`
}
type Command_ValidataApplications struct {
	ValidataApplications *ValidateApplications `protobuf:"bytes,22,opt,name=validata_applications,json=validataApplications,proto3,oneof" json:"validata_applications,omitempty"`
}
type Command_InstallMedia struct {
	InstallMedia *InstallMedia `protobuf:"bytes,23,opt,name=install_media,json=installMedia,proto3,oneof" json:"install_media,omitempty"`
}
type Command_RemoveMedia struct {
	RemoveMedia *RemoveMedia `protobuf:"bytes,24,opt,name=remove_media,json=removeMedia,proto3,oneof" json:"remove_media,omitempty"`
}
type Command_Settings struct {
	Settings *Settings `protobuf:"bytes,25,opt,name=settings,proto3,oneof" json:"settings,omitempty"`
}
type Command_ManagedApplicationConfiguration struct {
	ManagedApplicationConfiguration *ManagedApplicationConfiguration `protobuf:"bytes,26,opt,name=managed_application_configuration,json=managedApplicationConfiguration,proto3,oneof" json:"managed_application_configuration,omitempty"`
}
type Command_ManagedApplicationAttributes struct {
	ManagedApplicationAttributes *ManagedApplicationAttributes `protobuf:"bytes,27,opt,name=managed_application_attributes,json=managedApplicationAttributes,proto3,oneof" json:"managed_application_attributes,omitempty"`
}
type Command_ManagedApplicationFeedback struct {
	ManagedApplicationFeedback *ManagedApplicationFeedback `protobuf:"bytes,28,opt,name=managed_application_feedback,json=managedApplicationFeedback,proto3,oneof" json:"managed_application_feedback,omitempty"`
}
type Command_SetFirmwarePassword struct {
	SetFirmwarePassword *SetFirmwarePassword `protobuf:"bytes,29,opt,name=set_firmware_password,json=setFirmwarePassword,proto3,oneof" json:"set_firmware_password,omitempty"`
}
type Command_VerifyFirmwarePassword struct {
	VerifyFirmwarePassword *VerifyFirmwarePassword `protobuf:"bytes,30,opt,name=verify_firmware_password,json=verifyFirmwarePassword,proto3,oneof" json:"verify_firmware_password,omitempty"`
}
type Command_SetAutoAdminPassword struct {
	SetAutoAdminPassword *SetAutoAdminPassword `protobuf:"bytes,31,opt,name=set_auto_admin_password,json=setAutoAdminPassword,proto3,oneof" json:"set_auto_admin_password,omitempty"`
}
type Command_ScheduleOsUpdate struct {
	ScheduleOsUpdate *ScheduleOSUpdate `protobuf:"bytes,32,opt,name=schedule_os_update,json=scheduleOsUpdate,proto3,oneof" json:"schedule_os_update,omitempty"`
}
type Command_ScheduleOsUpdateScan struct {
	ScheduleOsUpdateScan *ScheduleOSUpdateScan `protobuf:"bytes,33,opt,name=schedule_os_update_scan,json=scheduleOsUpdateScan,proto3,oneof" json:"schedule_os_update_scan,omitempty"`
}
type Command_ActiveNsExtensions struct {
	ActiveNsExtensions *ActiveNSExtensions `protobuf:"bytes,34,opt,name=active_ns_extensions,json=activeNsExtensions,proto3,oneof" json:"active_ns_extensions,omitempty"`
}
type Command_RotateFilevaultKey struct {
	RotateFilevaultKey *RotateFileVaultKey `protobuf:"bytes,35,opt,name=rotate_filevault_key,json=rotateFilevaultKey,proto3,oneof" json:"rotate_filevault_key,omitempty"`
}
type Command_InstallEnterpriseApplication struct {
	InstallEnterpriseApplication *InstallEnterpriseApplication `protobuf:"bytes,36,opt,name=install_enterprise_application,json=installEnterpriseApplication,proto3,oneof" json:"install_enterprise_application,omitempty"`
}
type Command_SetBootstrapToken struct {
	SetBootstrapToken *SetBootstrapToken `protobuf:"bytes,37,opt,name=set_bootstrap_token,json=setBootstrapToken,proto3,oneof" json:"set_bootstrap_token,omitempty"`
}

func (*Command_InstallProfile) isCommand_Request()                  {}
func (*Command_RemoveProfile) isCommand_Request()                   {}
func (*Command_InstallProvisioningProfile) isCommand_Request()      {}
func (*Command_RemoveProfisioningProfile) isCommand_Request()       {}
func (*Command_InstalledApplicationList) isCommand_Request()        {}
func (*Command_DeviceInformation) isCommand_Request()               {}
func (*Command_DeviceLock) isCommand_Request()                      {}
func (*Command_ClearPasscode) isCommand_Request()                   {}
func (*Command_EraseDevice) isCommand_Request()                     {}
func (*Command_RequestMirroring) isCommand_Request()                {}
func (*Command_Restrictions) isCommand_Request()                    {}
func (*Command_UnlockUserAccount) isCommand_Request()               {}
func (*Command_DeleteUser) isCommand_Request()                      {}
func (*Command_EnableLostMode) isCommand_Request()                  {}
func (*Command_InstallApplication) isCommand_Request()              {}
func (*Command_AccountConfiguration) isCommand_Request()            {}
func (*Command_ApplyRedemptionCode) isCommand_Request()             {}
func (*Command_ManagedApplicationList) isCommand_Request()          {}
func (*Command_RemoveApplication) isCommand_Request()               {}
func (*Command_InviteToProgram) isCommand_Request()                 {}
func (*Command_ValidataApplications) isCommand_Request()            {}
func (*Command_InstallMedia) isCommand_Request()                    {}
func (*Command_RemoveMedia) isCommand_Request()                     {}
func (*Command_Settings) isCommand_Request()                        {}
func (*Command_ManagedApplicationConfiguration) isCommand_Request() {}
func (*Command_ManagedApplicationAttributes) isCommand_Request()    {}
func (*Command_ManagedApplicationFeedback) isCommand_Request()      {}
func (*Command_SetFirmwarePassword) isCommand_Request()             {}
func (*Command_VerifyFirmwarePassword) isCommand_Request()          {}
func (*Command_SetAutoAdminPassword) isCommand_Request()            {}
func (*Command_ScheduleOsUpdate) isCommand_Request()                {}
func (*Command_ScheduleOsUpdateScan) isCommand_Request()            {}
func (*Command_ActiveNsExtensions) isCommand_Request()              {}
func (*Command_RotateFilevaultKey) isCommand_Request()              {}
func (*Command_InstallEnterpriseApplication) isCommand_Request()    {}
func (*Command_SetBootstrapToken) isCommand_Request()               {}

func (m *Command) GetRequest() isCommand_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Command) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *Command) GetInstallProfile() *InstallProfile {
	if x, ok := m.GetRequest().(*Command_InstallProfile); ok {
		return x.InstallProfile
	}
	return nil
}

func (m *Command) GetRemoveProfile() *RemoveProfile {
	if x, ok := m.GetRequest().(*Command_RemoveProfile); ok {
		return x.RemoveProfile
	}
	return nil
}

func (m *Command) GetInstallProvisioningProfile() *InstallProvisioningProfile {
	if x, ok := m.GetRequest().(*Command_InstallProvisioningProfile); ok {
		return x.InstallProvisioningProfile
	}
	return nil
}

func (m *Command) GetRemoveProfisioningProfile() *RemoveProvisioningProfile {
	if x, ok := m.GetRequest().(*Command_RemoveProfisioningProfile); ok {
		return x.RemoveProfisioningProfile
	}
	return nil
}

func (m *Command) GetInstalledApplicationList() *InstalledApplicationList {
	if x, ok := m.GetRequest().(*Command_InstalledApplicationList); ok {
		return x.InstalledApplicationList
	}
	return nil
}

func (m *Command) GetDeviceInformation() *DeviceInformation {
	if x, ok := m.GetRequest().(*Command_DeviceInformation); ok {
		return x.DeviceInformation
	}
	return nil
}

func (m *Command) GetDeviceLock() *DeviceLock {
	if x, ok := m.GetRequest().(*Command_DeviceLock); ok {
		return x.DeviceLock
	}
	return nil
}

func (m *Command) GetClearPasscode() *ClearPasscode {
	if x, ok := m.GetRequest().(*Command_ClearPasscode); ok {
		return x.ClearPasscode
	}
	return nil
}

func (m *Command) GetEraseDevice() *EraseDevice {
	if x, ok := m.GetRequest().(*Command_EraseDevice); ok {
		return x.EraseDevice
	}
	return nil
}

func (m *Command) GetRequestMirroring() *RequestMirroring {
	if x, ok := m.GetRequest().(*Command_RequestMirroring); ok {
		return x.RequestMirroring
	}
	return nil
}

func (m *Command) GetRestrictions() *Restrictions {
	if x, ok := m.GetRequest().(*Command_Restrictions); ok {
		return x.Restrictions
	}
	return nil
}

func (m *Command) GetUnlockUserAccount() *UnlockUserAccount {
	if x, ok := m.GetRequest().(*Command_UnlockUserAccount); ok {
		return x.UnlockUserAccount
	}
	return nil
}

func (m *Command) GetDeleteUser() *DeleteUser {
	if x, ok := m.GetRequest().(*Command_DeleteUser); ok {
		return x.DeleteUser
	}
	return nil
}

func (m *Command) GetEnableLostMode() *EnableLostMode {
	if x, ok := m.GetRequest().(*Command_EnableLostMode); ok {
		return x.EnableLostMode
	}
	return nil
}

func (m *Command) GetInstallApplication() *InstallApplication {
	if x, ok := m.GetRequest().(*Command_InstallApplication); ok {
		return x.InstallApplication
	}
	return nil
}

func (m *Command) GetAccountConfiguration() *AccountConfiguration {
	if x, ok := m.GetRequest().(*Command_AccountConfiguration); ok {
		return x.AccountConfiguration
	}
	return nil
}

func (m *Command) GetApplyRedemptionCode() *ApplyRedemptionCode {
	if x, ok := m.GetRequest().(*Command_ApplyRedemptionCode); ok {
		return x.ApplyRedemptionCode
	}
	return nil
}

func (m *Command) GetManagedApplicationList() *ManagedApplicationList {
	if x, ok := m.GetRequest().(*Command_ManagedApplicationList); ok {
		return x.ManagedApplicationList
	}
	return nil
}

func (m *Command) GetRemoveApplication() *RemoveApplication {
	if x, ok := m.GetRequest().(*Command_RemoveApplication); ok {
		return x.RemoveApplication
	}
	return nil
}

func (m *Command) GetInviteToProgram() *InviteToProgram {
	if x, ok := m.GetRequest().(*Command_InviteToProgram); ok {
		return x.InviteToProgram
	}
	return nil
}

func (m *Command) GetValidataApplications() *ValidateApplications {
	if x, ok := m.GetRequest().(*Command_ValidataApplications); ok {
		return x.ValidataApplications
	}
	return nil
}

func (m *Command) GetInstallMedia() *InstallMedia {
	if x, ok := m.GetRequest().(*Command_InstallMedia); ok {
		return x.InstallMedia
	}
	return nil
}

func (m *Command) GetRemoveMedia() *RemoveMedia {
	if x, ok := m.GetRequest().(*Command_RemoveMedia); ok {
		return x.RemoveMedia
	}
	return nil
}

func (m *Command) GetSettings() *Settings {
	if x, ok := m.GetRequest().(*Command_Settings); ok {
		return x.Settings
	}
	return nil
}

func (m *Command) GetManagedApplicationConfiguration() *ManagedApplicationConfiguration {
	if x, ok := m.GetRequest().(*Command_ManagedApplicationConfiguration); ok {
		return x.ManagedApplicationConfiguration
	}
	return nil
}

func (m *Command) GetManagedApplicationAttributes() *ManagedApplicationAttributes {
	if x, ok := m.GetRequest().(*Command_ManagedApplicationAttributes); ok {
		return x.ManagedApplicationAttributes
	}
	return nil
}

func (m *Command) GetManagedApplicationFeedback() *ManagedApplicationFeedback {
	if x, ok := m.GetRequest().(*Command_ManagedApplicationFeedback); ok {
		return x.ManagedApplicationFeedback
	}
	return nil
}

func (m *Command) GetSetFirmwarePassword() *SetFirmwarePassword {
	if x, ok := m.GetRequest().(*Command_SetFirmwarePassword); ok {
		return x.SetFirmwarePassword
	}
	return nil
}

func (m *Command) GetVerifyFirmwarePassword() *VerifyFirmwarePassword {
	if x, ok := m.GetRequest().(*Command_VerifyFirmwarePassword); ok {
		return x.VerifyFirmwarePassword
	}
	return nil
}

func (m *Command) GetSetAutoAdminPassword() *SetAutoAdminPassword {
	if x, ok := m.GetRequest().(*Command_SetAutoAdminPassword); ok {
		return x.SetAutoAdminPassword
	}
	return nil
}

func (m *Command) GetScheduleOsUpdate() *ScheduleOSUpdate {
	if x, ok := m.GetRequest().(*Command_ScheduleOsUpdate); ok {
		return x.ScheduleOsUpdate
	}
	return nil
}

func (m *Command) GetScheduleOsUpdateScan() *ScheduleOSUpdateScan {
	if x, ok := m.GetRequest().(*Command_ScheduleOsUpdateScan); ok {
		return x.ScheduleOsUpdateScan
	}
	return nil
}

func (m *Command) GetActiveNsExtensions() *ActiveNSExtensions {
	if x, ok := m.GetRequest().(*Command_ActiveNsExtensions); ok {
		return x.ActiveNsExtensions
	}
	return nil
}

func (m *Command) GetRotateFilevaultKey() *RotateFileVaultKey {
	if x, ok := m.GetRequest().(*Command_RotateFilevaultKey); ok {
		return x.RotateFilevaultKey
	}
	return nil
}

func (m *Command) GetInstallEnterpriseApplication() *InstallEnterpriseApplication {
	if x, ok := m.GetRequest().(*Command_InstallEnterpriseApplication); ok {
		return x.InstallEnterpriseApplication
	}
	return nil
}

func (m *Command) GetSetBootstrapToken() *SetBootstrapToken {
	if x, ok := m.GetRequest().(*Command_SetBootstrapToken); ok {
		return x.SetBootstrapToken
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Command) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Command_InstallProfile)(nil),
		(*Command_RemoveProfile)(nil),
		(*Command_InstallProvisioningProfile)(nil),
		(*Command_RemoveProfisioningProfile)(nil),
		(*Command_InstalledApplicationList)(nil),
		(*Command_DeviceInformation)(nil),
		(*Command_DeviceLock)(nil),
		(*Command_ClearPasscode)(nil),
		(*Command_EraseDevice)(nil),
		(*Command_RequestMirroring)(nil),
		(*Command_Restrictions)(nil),
		(*Command_UnlockUserAccount)(nil),
		(*Command_DeleteUser)(nil),
		(*Command_EnableLostMode)(nil),
		(*Command_InstallApplication)(nil),
		(*Command_AccountConfiguration)(nil),
		(*Command_ApplyRedemptionCode)(nil),
		(*Command_ManagedApplicationList)(nil),
		(*Command_RemoveApplication)(nil),
		(*Command_InviteToProgram)(nil),
		(*Command_ValidataApplications)(nil),
		(*Command_InstallMedia)(nil),
		(*Command_RemoveMedia)(nil),
		(*Command_Settings)(nil),
		(*Command_ManagedApplicationConfiguration)(nil),
		(*Command_ManagedApplicationAttributes)(nil),
		(*Command_ManagedApplicationFeedback)(nil),
		(*Command_SetFirmwarePassword)(nil),
		(*Command_VerifyFirmwarePassword)(nil),
		(*Command_SetAutoAdminPassword)(nil),
		(*Command_ScheduleOsUpdate)(nil),
		(*Command_ScheduleOsUpdateScan)(nil),
		(*Command_ActiveNsExtensions)(nil),
		(*Command_RotateFilevaultKey)(nil),
		(*Command_InstallEnterpriseApplication)(nil),
		(*Command_SetBootstrapToken)(nil),
	}
}

type InstallProfile struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallProfile) Reset()         { *m = InstallProfile{} }
func (m *InstallProfile) String() string { return proto.CompactTextString(m) }
func (*InstallProfile) ProtoMessage()    {}
func (*InstallProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{2}
}
func (m *InstallProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallProfile.Merge(m, src)
}
func (m *InstallProfile) XXX_Size() int {
	return m.Size()
}
func (m *InstallProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallProfile.DiscardUnknown(m)
}

var xxx_messageInfo_InstallProfile proto.InternalMessageInfo

func (m *InstallProfile) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type RemoveProfile struct {
	Identifier           string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveProfile) Reset()         { *m = RemoveProfile{} }
func (m *RemoveProfile) String() string { return proto.CompactTextString(m) }
func (*RemoveProfile) ProtoMessage()    {}
func (*RemoveProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{3}
}
func (m *RemoveProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveProfile.Merge(m, src)
}
func (m *RemoveProfile) XXX_Size() int {
	return m.Size()
}
func (m *RemoveProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveProfile.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveProfile proto.InternalMessageInfo

func (m *RemoveProfile) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type InstallProvisioningProfile struct {
	ProvisioningProfile  []byte   `protobuf:"bytes,1,opt,name=provisioning_profile,json=provisioningProfile,proto3" json:"provisioning_profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallProvisioningProfile) Reset()         { *m = InstallProvisioningProfile{} }
func (m *InstallProvisioningProfile) String() string { return proto.CompactTextString(m) }
func (*InstallProvisioningProfile) ProtoMessage()    {}
func (*InstallProvisioningProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{4}
}
func (m *InstallProvisioningProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallProvisioningProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallProvisioningProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallProvisioningProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallProvisioningProfile.Merge(m, src)
}
func (m *InstallProvisioningProfile) XXX_Size() int {
	return m.Size()
}
func (m *InstallProvisioningProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallProvisioningProfile.DiscardUnknown(m)
}

var xxx_messageInfo_InstallProvisioningProfile proto.InternalMessageInfo

func (m *InstallProvisioningProfile) GetProvisioningProfile() []byte {
	if m != nil {
		return m.ProvisioningProfile
	}
	return nil
}

type RemoveProvisioningProfile struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveProvisioningProfile) Reset()         { *m = RemoveProvisioningProfile{} }
func (m *RemoveProvisioningProfile) String() string { return proto.CompactTextString(m) }
func (*RemoveProvisioningProfile) ProtoMessage()    {}
func (*RemoveProvisioningProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{5}
}
func (m *RemoveProvisioningProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveProvisioningProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveProvisioningProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveProvisioningProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveProvisioningProfile.Merge(m, src)
}
func (m *RemoveProvisioningProfile) XXX_Size() int {
	return m.Size()
}
func (m *RemoveProvisioningProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveProvisioningProfile.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveProvisioningProfile proto.InternalMessageInfo

func (m *RemoveProvisioningProfile) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type InstalledApplicationList struct {
	Identifiers          []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	ManagedAppsOnly      bool     `protobuf:"varint,2,opt,name=managed_apps_only,json=managedAppsOnly,proto3" json:"managed_apps_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstalledApplicationList) Reset()         { *m = InstalledApplicationList{} }
func (m *InstalledApplicationList) String() string { return proto.CompactTextString(m) }
func (*InstalledApplicationList) ProtoMessage()    {}
func (*InstalledApplicationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{6}
}
func (m *InstalledApplicationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstalledApplicationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstalledApplicationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstalledApplicationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstalledApplicationList.Merge(m, src)
}
func (m *InstalledApplicationList) XXX_Size() int {
	return m.Size()
}
func (m *InstalledApplicationList) XXX_DiscardUnknown() {
	xxx_messageInfo_InstalledApplicationList.DiscardUnknown(m)
}

var xxx_messageInfo_InstalledApplicationList proto.InternalMessageInfo

func (m *InstalledApplicationList) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func (m *InstalledApplicationList) GetManagedAppsOnly() bool {
	if m != nil {
		return m.ManagedAppsOnly
	}
	return false
}

type DeviceInformation struct {
	Queries              []string `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInformation) Reset()         { *m = DeviceInformation{} }
func (m *DeviceInformation) String() string { return proto.CompactTextString(m) }
func (*DeviceInformation) ProtoMessage()    {}
func (*DeviceInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{7}
}
func (m *DeviceInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceInformation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInformation.Merge(m, src)
}
func (m *DeviceInformation) XXX_Size() int {
	return m.Size()
}
func (m *DeviceInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInformation.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInformation proto.InternalMessageInfo

func (m *DeviceInformation) GetQueries() []string {
	if m != nil {
		return m.Queries
	}
	return nil
}

type ClearPasscode struct {
	UnlockToken          []byte   `protobuf:"bytes,1,opt,name=unlock_token,json=unlockToken,proto3" json:"unlock_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearPasscode) Reset()         { *m = ClearPasscode{} }
func (m *ClearPasscode) String() string { return proto.CompactTextString(m) }
func (*ClearPasscode) ProtoMessage()    {}
func (*ClearPasscode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{8}
}
func (m *ClearPasscode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearPasscode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearPasscode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearPasscode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearPasscode.Merge(m, src)
}
func (m *ClearPasscode) XXX_Size() int {
	return m.Size()
}
func (m *ClearPasscode) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearPasscode.DiscardUnknown(m)
}

var xxx_messageInfo_ClearPasscode proto.InternalMessageInfo

func (m *ClearPasscode) GetUnlockToken() []byte {
	if m != nil {
		return m.UnlockToken
	}
	return nil
}

type DeviceLock struct {
	Pin                  string   `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceLock) Reset()         { *m = DeviceLock{} }
func (m *DeviceLock) String() string { return proto.CompactTextString(m) }
func (*DeviceLock) ProtoMessage()    {}
func (*DeviceLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{9}
}
func (m *DeviceLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceLock.Merge(m, src)
}
func (m *DeviceLock) XXX_Size() int {
	return m.Size()
}
func (m *DeviceLock) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceLock.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceLock proto.InternalMessageInfo

func (m *DeviceLock) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *DeviceLock) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeviceLock) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type EraseDevice struct {
	Pin                    string   `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	PreserveDataPlan       bool     `protobuf:"varint,2,opt,name=preserve_data_plan,json=preserveDataPlan,proto3" json:"preserve_data_plan,omitempty"`
	DisallowProximitySetup bool     `protobuf:"varint,3,opt,name=disallow_proximity_setup,json=disallowProximitySetup,proto3" json:"disallow_proximity_setup,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *EraseDevice) Reset()         { *m = EraseDevice{} }
func (m *EraseDevice) String() string { return proto.CompactTextString(m) }
func (*EraseDevice) ProtoMessage()    {}
func (*EraseDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{10}
}
func (m *EraseDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EraseDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EraseDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EraseDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EraseDevice.Merge(m, src)
}
func (m *EraseDevice) XXX_Size() int {
	return m.Size()
}
func (m *EraseDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_EraseDevice.DiscardUnknown(m)
}

var xxx_messageInfo_EraseDevice proto.InternalMessageInfo

func (m *EraseDevice) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *EraseDevice) GetPreserveDataPlan() bool {
	if m != nil {
		return m.PreserveDataPlan
	}
	return false
}

func (m *EraseDevice) GetDisallowProximitySetup() bool {
	if m != nil {
		return m.DisallowProximitySetup
	}
	return false
}

type RequestMirroring struct {
	DestinationName      string   `protobuf:"bytes,1,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	DestinationDeviceId  string   `protobuf:"bytes,2,opt,name=destination_device_id,json=destinationDeviceId,proto3" json:"destination_device_id,omitempty"`
	ScanTime             string   `protobuf:"bytes,3,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestMirroring) Reset()         { *m = RequestMirroring{} }
func (m *RequestMirroring) String() string { return proto.CompactTextString(m) }
func (*RequestMirroring) ProtoMessage()    {}
func (*RequestMirroring) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{11}
}
func (m *RequestMirroring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMirroring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMirroring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMirroring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMirroring.Merge(m, src)
}
func (m *RequestMirroring) XXX_Size() int {
	return m.Size()
}
func (m *RequestMirroring) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMirroring.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMirroring proto.InternalMessageInfo

func (m *RequestMirroring) GetDestinationName() string {
	if m != nil {
		return m.DestinationName
	}
	return ""
}

func (m *RequestMirroring) GetDestinationDeviceId() string {
	if m != nil {
		return m.DestinationDeviceId
	}
	return ""
}

func (m *RequestMirroring) GetScanTime() string {
	if m != nil {
		return m.ScanTime
	}
	return ""
}

func (m *RequestMirroring) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Restrictions struct {
	ProfileRestrictions  bool     `protobuf:"varint,1,opt,name=profile_restrictions,json=profileRestrictions,proto3" json:"profile_restrictions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Restrictions) Reset()         { *m = Restrictions{} }
func (m *Restrictions) String() string { return proto.CompactTextString(m) }
func (*Restrictions) ProtoMessage()    {}
func (*Restrictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{12}
}
func (m *Restrictions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Restrictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Restrictions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Restrictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restrictions.Merge(m, src)
}
func (m *Restrictions) XXX_Size() int {
	return m.Size()
}
func (m *Restrictions) XXX_DiscardUnknown() {
	xxx_messageInfo_Restrictions.DiscardUnknown(m)
}

var xxx_messageInfo_Restrictions proto.InternalMessageInfo

func (m *Restrictions) GetProfileRestrictions() bool {
	if m != nil {
		return m.ProfileRestrictions
	}
	return false
}

type UnlockUserAccount struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockUserAccount) Reset()         { *m = UnlockUserAccount{} }
func (m *UnlockUserAccount) String() string { return proto.CompactTextString(m) }
func (*UnlockUserAccount) ProtoMessage()    {}
func (*UnlockUserAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{13}
}
func (m *UnlockUserAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockUserAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockUserAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockUserAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockUserAccount.Merge(m, src)
}
func (m *UnlockUserAccount) XXX_Size() int {
	return m.Size()
}
func (m *UnlockUserAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockUserAccount.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockUserAccount proto.InternalMessageInfo

func (m *UnlockUserAccount) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DeleteUser struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	ForceDeletion        bool     `protobuf:"varint,2,opt,name=force_deletion,json=forceDeletion,proto3" json:"force_deletion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteUser) Reset()         { *m = DeleteUser{} }
func (m *DeleteUser) String() string { return proto.CompactTextString(m) }
func (*DeleteUser) ProtoMessage()    {}
func (*DeleteUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{14}
}
func (m *DeleteUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUser.Merge(m, src)
}
func (m *DeleteUser) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUser) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUser.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUser proto.InternalMessageInfo

func (m *DeleteUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeleteUser) GetForceDeletion() bool {
	if m != nil {
		return m.ForceDeletion
	}
	return false
}

type EnableLostMode struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Footnote             string   `protobuf:"bytes,3,opt,name=footnote,proto3" json:"footnote,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableLostMode) Reset()         { *m = EnableLostMode{} }
func (m *EnableLostMode) String() string { return proto.CompactTextString(m) }
func (*EnableLostMode) ProtoMessage()    {}
func (*EnableLostMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{15}
}
func (m *EnableLostMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableLostMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableLostMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableLostMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableLostMode.Merge(m, src)
}
func (m *EnableLostMode) XXX_Size() int {
	return m.Size()
}
func (m *EnableLostMode) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableLostMode.DiscardUnknown(m)
}

var xxx_messageInfo_EnableLostMode proto.InternalMessageInfo

func (m *EnableLostMode) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EnableLostMode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *EnableLostMode) GetFootnote() string {
	if m != nil {
		return m.Footnote
	}
	return ""
}

type InstallApplication struct {
	ItunesStoreId         int64                            `protobuf:"varint,1,opt,name=itunes_store_id,json=itunesStoreId,proto3" json:"itunes_store_id,omitempty"`
	Identifier            string                           `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Options               *InstallApplicationOptions       `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	ManifestUrl           string                           `protobuf:"bytes,4,opt,name=manifest_url,json=manifestUrl,proto3" json:"manifest_url,omitempty"`
	ManagementFlags       int64                            `protobuf:"varint,5,opt,name=management_flags,json=managementFlags,proto3" json:"management_flags,omitempty"`
	Configuration         *InstallApplicationConfiguration `protobuf:"bytes,6,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Attributes            *InstallApplicationAttributes    `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	ChangeManagementState string                           `protobuf:"bytes,8,opt,name=change_management_state,json=changeManagementState,proto3" json:"change_management_state,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                         `json:"-"`
	XXX_unrecognized      []byte                           `json:"-"`
	XXX_sizecache         int32                            `json:"-"`
}

func (m *InstallApplication) Reset()         { *m = InstallApplication{} }
func (m *InstallApplication) String() string { return proto.CompactTextString(m) }
func (*InstallApplication) ProtoMessage()    {}
func (*InstallApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{16}
}
func (m *InstallApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallApplication.Merge(m, src)
}
func (m *InstallApplication) XXX_Size() int {
	return m.Size()
}
func (m *InstallApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallApplication.DiscardUnknown(m)
}

var xxx_messageInfo_InstallApplication proto.InternalMessageInfo

func (m *InstallApplication) GetItunesStoreId() int64 {
	if m != nil {
		return m.ItunesStoreId
	}
	return 0
}

func (m *InstallApplication) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *InstallApplication) GetOptions() *InstallApplicationOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *InstallApplication) GetManifestUrl() string {
	if m != nil {
		return m.ManifestUrl
	}
	return ""
}

func (m *InstallApplication) GetManagementFlags() int64 {
	if m != nil {
		return m.ManagementFlags
	}
	return 0
}

func (m *InstallApplication) GetConfiguration() *InstallApplicationConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *InstallApplication) GetAttributes() *InstallApplicationAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *InstallApplication) GetChangeManagementState() string {
	if m != nil {
		return m.ChangeManagementState
	}
	return ""
}

type InstallApplicationOptions struct {
	PurchaseMethod       int64    `protobuf:"varint,1,opt,name=purchase_method,json=purchaseMethod,proto3" json:"purchase_method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallApplicationOptions) Reset()         { *m = InstallApplicationOptions{} }
func (m *InstallApplicationOptions) String() string { return proto.CompactTextString(m) }
func (*InstallApplicationOptions) ProtoMessage()    {}
func (*InstallApplicationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{17}
}
func (m *InstallApplicationOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallApplicationOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallApplicationOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallApplicationOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallApplicationOptions.Merge(m, src)
}
func (m *InstallApplicationOptions) XXX_Size() int {
	return m.Size()
}
func (m *InstallApplicationOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallApplicationOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InstallApplicationOptions proto.InternalMessageInfo

func (m *InstallApplicationOptions) GetPurchaseMethod() int64 {
	if m != nil {
		return m.PurchaseMethod
	}
	return 0
}

type InstallApplicationConfiguration struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallApplicationConfiguration) Reset()         { *m = InstallApplicationConfiguration{} }
func (m *InstallApplicationConfiguration) String() string { return proto.CompactTextString(m) }
func (*InstallApplicationConfiguration) ProtoMessage()    {}
func (*InstallApplicationConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{18}
}
func (m *InstallApplicationConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallApplicationConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallApplicationConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallApplicationConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallApplicationConfiguration.Merge(m, src)
}
func (m *InstallApplicationConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *InstallApplicationConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallApplicationConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_InstallApplicationConfiguration proto.InternalMessageInfo

type InstallApplicationAttributes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallApplicationAttributes) Reset()         { *m = InstallApplicationAttributes{} }
func (m *InstallApplicationAttributes) String() string { return proto.CompactTextString(m) }
func (*InstallApplicationAttributes) ProtoMessage()    {}
func (*InstallApplicationAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{19}
}
func (m *InstallApplicationAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallApplicationAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallApplicationAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallApplicationAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallApplicationAttributes.Merge(m, src)
}
func (m *InstallApplicationAttributes) XXX_Size() int {
	return m.Size()
}
func (m *InstallApplicationAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallApplicationAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_InstallApplicationAttributes proto.InternalMessageInfo

type InstallEnterpriseApplication struct {
	Manifest                       *Manifest `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	ManifestUrl                    string    `protobuf:"bytes,2,opt,name=manifest_url,json=manifestUrl,proto3" json:"manifest_url,omitempty"`
	ManifestUrlPinningCerts        [][]byte  `protobuf:"bytes,3,rep,name=manifest_url_pinning_certs,json=manifestUrlPinningCerts,proto3" json:"manifest_url_pinning_certs,omitempty"`
	PinningRevocationCheckRequired bool      `protobuf:"varint,4,opt,name=pinning_revocation_check_required,json=pinningRevocationCheckRequired,proto3" json:"pinning_revocation_check_required,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}  `json:"-"`
	XXX_unrecognized               []byte    `json:"-"`
	XXX_sizecache                  int32     `json:"-"`
}

func (m *InstallEnterpriseApplication) Reset()         { *m = InstallEnterpriseApplication{} }
func (m *InstallEnterpriseApplication) String() string { return proto.CompactTextString(m) }
func (*InstallEnterpriseApplication) ProtoMessage()    {}
func (*InstallEnterpriseApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{20}
}
func (m *InstallEnterpriseApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallEnterpriseApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallEnterpriseApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallEnterpriseApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallEnterpriseApplication.Merge(m, src)
}
func (m *InstallEnterpriseApplication) XXX_Size() int {
	return m.Size()
}
func (m *InstallEnterpriseApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallEnterpriseApplication.DiscardUnknown(m)
}

var xxx_messageInfo_InstallEnterpriseApplication proto.InternalMessageInfo

func (m *InstallEnterpriseApplication) GetManifest() *Manifest {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *InstallEnterpriseApplication) GetManifestUrl() string {
	if m != nil {
		return m.ManifestUrl
	}
	return ""
}

func (m *InstallEnterpriseApplication) GetManifestUrlPinningCerts() [][]byte {
	if m != nil {
		return m.ManifestUrlPinningCerts
	}
	return nil
}

func (m *InstallEnterpriseApplication) GetPinningRevocationCheckRequired() bool {
	if m != nil {
		return m.PinningRevocationCheckRequired
	}
	return false
}

type Manifest struct {
	ManifestItems        []*ManifestItem `protobuf:"bytes,1,rep,name=manifest_items,json=manifestItems,proto3" json:"manifest_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Manifest) Reset()         { *m = Manifest{} }
func (m *Manifest) String() string { return proto.CompactTextString(m) }
func (*Manifest) ProtoMessage()    {}
func (*Manifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{21}
}
func (m *Manifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manifest.Merge(m, src)
}
func (m *Manifest) XXX_Size() int {
	return m.Size()
}
func (m *Manifest) XXX_DiscardUnknown() {
	xxx_messageInfo_Manifest.DiscardUnknown(m)
}

var xxx_messageInfo_Manifest proto.InternalMessageInfo

func (m *Manifest) GetManifestItems() []*ManifestItem {
	if m != nil {
		return m.ManifestItems
	}
	return nil
}

type ManifestItem struct {
	Assets               []*Asset  `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	Metadata             *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ManifestItem) Reset()         { *m = ManifestItem{} }
func (m *ManifestItem) String() string { return proto.CompactTextString(m) }
func (*ManifestItem) ProtoMessage()    {}
func (*ManifestItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{22}
}
func (m *ManifestItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestItem.Merge(m, src)
}
func (m *ManifestItem) XXX_Size() int {
	return m.Size()
}
func (m *ManifestItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestItem.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestItem proto.InternalMessageInfo

func (m *ManifestItem) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *ManifestItem) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Asset struct {
	Kind                 string   `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Md5Size              int64    `protobuf:"varint,2,opt,name=md5_size,json=md5Size,proto3" json:"md5_size,omitempty"`
	Md5S                 []string `protobuf:"bytes,3,rep,name=md5s,proto3" json:"md5s,omitempty"`
	Url                  string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Sha256Size           int64    `protobuf:"varint,5,opt,name=sha256_size,json=sha256Size,proto3" json:"sha256_size,omitempty"`
	Sha256S              []string `protobuf:"bytes,6,rep,name=sha256s,proto3" json:"sha256s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{23}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Asset) GetMd5Size() int64 {
	if m != nil {
		return m.Md5Size
	}
	return 0
}

func (m *Asset) GetMd5S() []string {
	if m != nil {
		return m.Md5S
	}
	return nil
}

func (m *Asset) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Asset) GetSha256Size() int64 {
	if m != nil {
		return m.Sha256Size
	}
	return 0
}

func (m *Asset) GetSha256S() []string {
	if m != nil {
		return m.Sha256S
	}
	return nil
}

type Metadata struct {
	BundleIdentifier     string        `protobuf:"bytes,1,opt,name=bundle_identifier,json=bundleIdentifier,proto3" json:"bundle_identifier,omitempty"`
	BundleVersion        string        `protobuf:"bytes,2,opt,name=bundle_version,json=bundleVersion,proto3" json:"bundle_version,omitempty"`
	Items                []*BundleInfo `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Kind                 string        `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Subtitle             string        `protobuf:"bytes,5,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Title                string        `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	SizeInBytes          int64         `protobuf:"varint,7,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{24}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetBundleIdentifier() string {
	if m != nil {
		return m.BundleIdentifier
	}
	return ""
}

func (m *Metadata) GetBundleVersion() string {
	if m != nil {
		return m.BundleVersion
	}
	return ""
}

func (m *Metadata) GetItems() []*BundleInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Metadata) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Metadata) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *Metadata) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Metadata) GetSizeInBytes() int64 {
	if m != nil {
		return m.SizeInBytes
	}
	return 0
}

type BundleInfo struct {
	BundleIdentifier     string   `protobuf:"bytes,1,opt,name=bundle_identifier,json=bundleIdentifier,proto3" json:"bundle_identifier,omitempty"`
	BundleVersion        string   `protobuf:"bytes,2,opt,name=bundle_version,json=bundleVersion,proto3" json:"bundle_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BundleInfo) Reset()         { *m = BundleInfo{} }
func (m *BundleInfo) String() string { return proto.CompactTextString(m) }
func (*BundleInfo) ProtoMessage()    {}
func (*BundleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{25}
}
func (m *BundleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BundleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BundleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BundleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleInfo.Merge(m, src)
}
func (m *BundleInfo) XXX_Size() int {
	return m.Size()
}
func (m *BundleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BundleInfo proto.InternalMessageInfo

func (m *BundleInfo) GetBundleIdentifier() string {
	if m != nil {
		return m.BundleIdentifier
	}
	return ""
}

func (m *BundleInfo) GetBundleVersion() string {
	if m != nil {
		return m.BundleVersion
	}
	return ""
}

type ApplyRedemptionCode struct {
	Identifier           string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	RedemptionCode       string   `protobuf:"bytes,2,opt,name=redemption_code,json=redemptionCode,proto3" json:"redemption_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyRedemptionCode) Reset()         { *m = ApplyRedemptionCode{} }
func (m *ApplyRedemptionCode) String() string { return proto.CompactTextString(m) }
func (*ApplyRedemptionCode) ProtoMessage()    {}
func (*ApplyRedemptionCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{26}
}
func (m *ApplyRedemptionCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyRedemptionCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyRedemptionCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyRedemptionCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyRedemptionCode.Merge(m, src)
}
func (m *ApplyRedemptionCode) XXX_Size() int {
	return m.Size()
}
func (m *ApplyRedemptionCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyRedemptionCode.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyRedemptionCode proto.InternalMessageInfo

func (m *ApplyRedemptionCode) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ApplyRedemptionCode) GetRedemptionCode() string {
	if m != nil {
		return m.RedemptionCode
	}
	return ""
}

type ManagedApplicationList struct {
	Identifiers          []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagedApplicationList) Reset()         { *m = ManagedApplicationList{} }
func (m *ManagedApplicationList) String() string { return proto.CompactTextString(m) }
func (*ManagedApplicationList) ProtoMessage()    {}
func (*ManagedApplicationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{27}
}
func (m *ManagedApplicationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagedApplicationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagedApplicationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagedApplicationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedApplicationList.Merge(m, src)
}
func (m *ManagedApplicationList) XXX_Size() int {
	return m.Size()
}
func (m *ManagedApplicationList) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedApplicationList.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedApplicationList proto.InternalMessageInfo

func (m *ManagedApplicationList) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

type RemoveApplication struct {
	Identifier           string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveApplication) Reset()         { *m = RemoveApplication{} }
func (m *RemoveApplication) String() string { return proto.CompactTextString(m) }
func (*RemoveApplication) ProtoMessage()    {}
func (*RemoveApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{28}
}
func (m *RemoveApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveApplication.Merge(m, src)
}
func (m *RemoveApplication) XXX_Size() int {
	return m.Size()
}
func (m *RemoveApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveApplication.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveApplication proto.InternalMessageInfo

func (m *RemoveApplication) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type InviteToProgram struct {
	ProgramId            string   `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	InvitationUrl        string   `protobuf:"bytes,2,opt,name=invitation_url,json=invitationUrl,proto3" json:"invitation_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InviteToProgram) Reset()         { *m = InviteToProgram{} }
func (m *InviteToProgram) String() string { return proto.CompactTextString(m) }
func (*InviteToProgram) ProtoMessage()    {}
func (*InviteToProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{29}
}
func (m *InviteToProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteToProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteToProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteToProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteToProgram.Merge(m, src)
}
func (m *InviteToProgram) XXX_Size() int {
	return m.Size()
}
func (m *InviteToProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteToProgram.DiscardUnknown(m)
}

var xxx_messageInfo_InviteToProgram proto.InternalMessageInfo

func (m *InviteToProgram) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

func (m *InviteToProgram) GetInvitationUrl() string {
	if m != nil {
		return m.InvitationUrl
	}
	return ""
}

type ValidateApplications struct {
	Identifiers          []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateApplications) Reset()         { *m = ValidateApplications{} }
func (m *ValidateApplications) String() string { return proto.CompactTextString(m) }
func (*ValidateApplications) ProtoMessage()    {}
func (*ValidateApplications) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{30}
}
func (m *ValidateApplications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateApplications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateApplications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateApplications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateApplications.Merge(m, src)
}
func (m *ValidateApplications) XXX_Size() int {
	return m.Size()
}
func (m *ValidateApplications) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateApplications.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateApplications proto.InternalMessageInfo

func (m *ValidateApplications) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

type AccountConfiguration struct {
	SkipPrimarySetupAccountCreation     bool                      `protobuf:"varint,1,opt,name=skip_primary_setup_account_creation,json=skipPrimarySetupAccountCreation,proto3" json:"skip_primary_setup_account_creation,omitempty"`
	SetPrimarySetupAccountAsRegularUser bool                      `protobuf:"varint,2,opt,name=set_primary_setup_account_as_regular_user,json=setPrimarySetupAccountAsRegularUser,proto3" json:"set_primary_setup_account_as_regular_user,omitempty"`
	DontAutoPopulatePrimaryAccountInfo  bool                      `protobuf:"varint,4,opt,name=dont_auto_populate_primary_account_info,json=dontAutoPopulatePrimaryAccountInfo,proto3" json:"dont_auto_populate_primary_account_info,omitempty"`
	LockPrimaryAccountInfo              bool                      `protobuf:"varint,5,opt,name=lock_primary_account_info,json=lockPrimaryAccountInfo,proto3" json:"lock_primary_account_info,omitempty"`
	PrimaryAccountFullName              string                    `protobuf:"bytes,6,opt,name=primary_account_full_name,json=primaryAccountFullName,proto3" json:"primary_account_full_name,omitempty"`
	PrimaryAccountUserName              string                    `protobuf:"bytes,7,opt,name=primary_account_user_name,json=primaryAccountUserName,proto3" json:"primary_account_user_name,omitempty"`
	AutoSetupAdminAccounts              []*AutoSetupAdminAccounts `protobuf:"bytes,3,rep,name=auto_setup_admin_accounts,json=autoSetupAdminAccounts,proto3" json:"auto_setup_admin_accounts,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}                  `json:"-"`
	XXX_unrecognized                    []byte                    `json:"-"`
	XXX_sizecache                       int32                     `json:"-"`
}

func (m *AccountConfiguration) Reset()         { *m = AccountConfiguration{} }
func (m *AccountConfiguration) String() string { return proto.CompactTextString(m) }
func (*AccountConfiguration) ProtoMessage()    {}
func (*AccountConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{31}
}
func (m *AccountConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountConfiguration.Merge(m, src)
}
func (m *AccountConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *AccountConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_AccountConfiguration proto.InternalMessageInfo

func (m *AccountConfiguration) GetSkipPrimarySetupAccountCreation() bool {
	if m != nil {
		return m.SkipPrimarySetupAccountCreation
	}
	return false
}

func (m *AccountConfiguration) GetSetPrimarySetupAccountAsRegularUser() bool {
	if m != nil {
		return m.SetPrimarySetupAccountAsRegularUser
	}
	return false
}

func (m *AccountConfiguration) GetDontAutoPopulatePrimaryAccountInfo() bool {
	if m != nil {
		return m.DontAutoPopulatePrimaryAccountInfo
	}
	return false
}

func (m *AccountConfiguration) GetLockPrimaryAccountInfo() bool {
	if m != nil {
		return m.LockPrimaryAccountInfo
	}
	return false
}

func (m *AccountConfiguration) GetPrimaryAccountFullName() string {
	if m != nil {
		return m.PrimaryAccountFullName
	}
	return ""
}

func (m *AccountConfiguration) GetPrimaryAccountUserName() string {
	if m != nil {
		return m.PrimaryAccountUserName
	}
	return ""
}

func (m *AccountConfiguration) GetAutoSetupAdminAccounts() []*AutoSetupAdminAccounts {
	if m != nil {
		return m.AutoSetupAdminAccounts
	}
	return nil
}

type AutoSetupAdminAccounts struct {
	ShortName            string   `protobuf:"bytes,1,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	FullName             string   `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	PasswordHash         []byte   `protobuf:"bytes,3,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	Hidden               bool     `protobuf:"varint,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutoSetupAdminAccounts) Reset()         { *m = AutoSetupAdminAccounts{} }
func (m *AutoSetupAdminAccounts) String() string { return proto.CompactTextString(m) }
func (*AutoSetupAdminAccounts) ProtoMessage()    {}
func (*AutoSetupAdminAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{32}
}
func (m *AutoSetupAdminAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoSetupAdminAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoSetupAdminAccounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoSetupAdminAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoSetupAdminAccounts.Merge(m, src)
}
func (m *AutoSetupAdminAccounts) XXX_Size() int {
	return m.Size()
}
func (m *AutoSetupAdminAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoSetupAdminAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_AutoSetupAdminAccounts proto.InternalMessageInfo

func (m *AutoSetupAdminAccounts) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AutoSetupAdminAccounts) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *AutoSetupAdminAccounts) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

func (m *AutoSetupAdminAccounts) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

type InstallMedia struct {
	ItunesStoreId        int64    `protobuf:"varint,1,opt,name=itunes_store_id,json=itunesStoreId,proto3" json:"itunes_store_id,omitempty"`
	MediaUrl             string   `protobuf:"bytes,2,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	MediaType            string   `protobuf:"bytes,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallMedia) Reset()         { *m = InstallMedia{} }
func (m *InstallMedia) String() string { return proto.CompactTextString(m) }
func (*InstallMedia) ProtoMessage()    {}
func (*InstallMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{33}
}
func (m *InstallMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallMedia.Merge(m, src)
}
func (m *InstallMedia) XXX_Size() int {
	return m.Size()
}
func (m *InstallMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallMedia.DiscardUnknown(m)
}

var xxx_messageInfo_InstallMedia proto.InternalMessageInfo

func (m *InstallMedia) GetItunesStoreId() int64 {
	if m != nil {
		return m.ItunesStoreId
	}
	return 0
}

func (m *InstallMedia) GetMediaUrl() string {
	if m != nil {
		return m.MediaUrl
	}
	return ""
}

func (m *InstallMedia) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

type RemoveMedia struct {
	MediaType            string   `protobuf:"bytes,1,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ItunesStoreId        int64    `protobuf:"varint,2,opt,name=itunes_store_id,json=itunesStoreId,proto3" json:"itunes_store_id,omitempty"`
	PersistentId         string   `protobuf:"bytes,3,opt,name=persistent_id,json=persistentId,proto3" json:"persistent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveMedia) Reset()         { *m = RemoveMedia{} }
func (m *RemoveMedia) String() string { return proto.CompactTextString(m) }
func (*RemoveMedia) ProtoMessage()    {}
func (*RemoveMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{34}
}
func (m *RemoveMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMedia.Merge(m, src)
}
func (m *RemoveMedia) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMedia.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMedia proto.InternalMessageInfo

func (m *RemoveMedia) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

func (m *RemoveMedia) GetItunesStoreId() int64 {
	if m != nil {
		return m.ItunesStoreId
	}
	return 0
}

func (m *RemoveMedia) GetPersistentId() string {
	if m != nil {
		return m.PersistentId
	}
	return ""
}

type Settings struct {
	Settings             []*Setting `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{35}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return m.Size()
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

type Setting struct {
	Item                     string                           `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	DeviceName               *DeviceNameSetting               `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Hostname                 *HostnameSetting                 `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	VoiceRoaming             *VoiceRoamingSetting             `protobuf:"bytes,4,opt,name=voice_roaming,json=voiceRoaming,proto3" json:"voice_roaming,omitempty"`
	PersonalHotspot          *PersonalHotspotSetting          `protobuf:"bytes,5,opt,name=personal_hotspot,json=personalHotspot,proto3" json:"personal_hotspot,omitempty"`
	Wallpaper                *WallpaperSetting                `protobuf:"bytes,6,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
	DataRoaming              *DataRoamingSetting              `protobuf:"bytes,7,opt,name=data_roaming,json=dataRoaming,proto3" json:"data_roaming,omitempty"`
	Bluetooth                *BluetoothSetting                `protobuf:"bytes,8,opt,name=bluetooth,proto3" json:"bluetooth,omitempty"`
	ApplicationAttributes    *ApplicationAttributesSetting    `protobuf:"bytes,9,opt,name=application_attributes,json=applicationAttributes,proto3" json:"application_attributes,omitempty"`
	MdmOptions               *MDMOptionsSetting               `protobuf:"bytes,10,opt,name=mdm_options,json=mdmOptions,proto3" json:"mdm_options,omitempty"`
	PasscodeLockGracePeriod  *PasscodeLockGracePeriodSetting  `protobuf:"bytes,11,opt,name=passcode_lock_grace_period,json=passcodeLockGracePeriod,proto3" json:"passcode_lock_grace_period,omitempty"`
	MaximumResidentUsers     *MaximumResidentUsersSetting     `protobuf:"bytes,12,opt,name=maximum_resident_users,json=maximumResidentUsers,proto3" json:"maximum_resident_users,omitempty"`
	DiagnosticSubmission     *DiagnosticSubmissionSetting     `protobuf:"bytes,13,opt,name=diagnostic_submission,json=diagnosticSubmission,proto3" json:"diagnostic_submission,omitempty"`
	AppAnalytics             *AppAnalyticsSetting             `protobuf:"bytes,14,opt,name=app_analytics,json=appAnalytics,proto3" json:"app_analytics,omitempty"`
	ApplicationConfiguration *ApplicationConfigurationSetting `protobuf:"bytes,15,opt,name=application_configuration,json=applicationConfiguration,proto3" json:"application_configuration,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                         `json:"-"`
	XXX_unrecognized         []byte                           `json:"-"`
	XXX_sizecache            int32                            `json:"-"`
}

func (m *Setting) Reset()         { *m = Setting{} }
func (m *Setting) String() string { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()    {}
func (*Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{36}
}
func (m *Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setting.Merge(m, src)
}
func (m *Setting) XXX_Size() int {
	return m.Size()
}
func (m *Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Setting proto.InternalMessageInfo

func (m *Setting) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func (m *Setting) GetDeviceName() *DeviceNameSetting {
	if m != nil {
		return m.DeviceName
	}
	return nil
}

func (m *Setting) GetHostname() *HostnameSetting {
	if m != nil {
		return m.Hostname
	}
	return nil
}

func (m *Setting) GetVoiceRoaming() *VoiceRoamingSetting {
	if m != nil {
		return m.VoiceRoaming
	}
	return nil
}

func (m *Setting) GetPersonalHotspot() *PersonalHotspotSetting {
	if m != nil {
		return m.PersonalHotspot
	}
	return nil
}

func (m *Setting) GetWallpaper() *WallpaperSetting {
	if m != nil {
		return m.Wallpaper
	}
	return nil
}

func (m *Setting) GetDataRoaming() *DataRoamingSetting {
	if m != nil {
		return m.DataRoaming
	}
	return nil
}

func (m *Setting) GetBluetooth() *BluetoothSetting {
	if m != nil {
		return m.Bluetooth
	}
	return nil
}

func (m *Setting) GetApplicationAttributes() *ApplicationAttributesSetting {
	if m != nil {
		return m.ApplicationAttributes
	}
	return nil
}

func (m *Setting) GetMdmOptions() *MDMOptionsSetting {
	if m != nil {
		return m.MdmOptions
	}
	return nil
}

func (m *Setting) GetPasscodeLockGracePeriod() *PasscodeLockGracePeriodSetting {
	if m != nil {
		return m.PasscodeLockGracePeriod
	}
	return nil
}

func (m *Setting) GetMaximumResidentUsers() *MaximumResidentUsersSetting {
	if m != nil {
		return m.MaximumResidentUsers
	}
	return nil
}

func (m *Setting) GetDiagnosticSubmission() *DiagnosticSubmissionSetting {
	if m != nil {
		return m.DiagnosticSubmission
	}
	return nil
}

func (m *Setting) GetAppAnalytics() *AppAnalyticsSetting {
	if m != nil {
		return m.AppAnalytics
	}
	return nil
}

func (m *Setting) GetApplicationConfiguration() *ApplicationConfigurationSetting {
	if m != nil {
		return m.ApplicationConfiguration
	}
	return nil
}

type VoiceRoamingSetting struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoiceRoamingSetting) Reset()         { *m = VoiceRoamingSetting{} }
func (m *VoiceRoamingSetting) String() string { return proto.CompactTextString(m) }
func (*VoiceRoamingSetting) ProtoMessage()    {}
func (*VoiceRoamingSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{37}
}
func (m *VoiceRoamingSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoiceRoamingSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoiceRoamingSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoiceRoamingSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoiceRoamingSetting.Merge(m, src)
}
func (m *VoiceRoamingSetting) XXX_Size() int {
	return m.Size()
}
func (m *VoiceRoamingSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_VoiceRoamingSetting.DiscardUnknown(m)
}

var xxx_messageInfo_VoiceRoamingSetting proto.InternalMessageInfo

func (m *VoiceRoamingSetting) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type PersonalHotspotSetting struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonalHotspotSetting) Reset()         { *m = PersonalHotspotSetting{} }
func (m *PersonalHotspotSetting) String() string { return proto.CompactTextString(m) }
func (*PersonalHotspotSetting) ProtoMessage()    {}
func (*PersonalHotspotSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{38}
}
func (m *PersonalHotspotSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalHotspotSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalHotspotSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalHotspotSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalHotspotSetting.Merge(m, src)
}
func (m *PersonalHotspotSetting) XXX_Size() int {
	return m.Size()
}
func (m *PersonalHotspotSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalHotspotSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalHotspotSetting proto.InternalMessageInfo

func (m *PersonalHotspotSetting) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type WallpaperSetting struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Where                int64    `protobuf:"varint,2,opt,name=where,proto3" json:"where,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WallpaperSetting) Reset()         { *m = WallpaperSetting{} }
func (m *WallpaperSetting) String() string { return proto.CompactTextString(m) }
func (*WallpaperSetting) ProtoMessage()    {}
func (*WallpaperSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{39}
}
func (m *WallpaperSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallpaperSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallpaperSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallpaperSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallpaperSetting.Merge(m, src)
}
func (m *WallpaperSetting) XXX_Size() int {
	return m.Size()
}
func (m *WallpaperSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_WallpaperSetting.DiscardUnknown(m)
}

var xxx_messageInfo_WallpaperSetting proto.InternalMessageInfo

func (m *WallpaperSetting) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *WallpaperSetting) GetWhere() int64 {
	if m != nil {
		return m.Where
	}
	return 0
}

type DataRoamingSetting struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataRoamingSetting) Reset()         { *m = DataRoamingSetting{} }
func (m *DataRoamingSetting) String() string { return proto.CompactTextString(m) }
func (*DataRoamingSetting) ProtoMessage()    {}
func (*DataRoamingSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{40}
}
func (m *DataRoamingSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRoamingSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRoamingSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRoamingSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRoamingSetting.Merge(m, src)
}
func (m *DataRoamingSetting) XXX_Size() int {
	return m.Size()
}
func (m *DataRoamingSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRoamingSetting.DiscardUnknown(m)
}

var xxx_messageInfo_DataRoamingSetting proto.InternalMessageInfo

func (m *DataRoamingSetting) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type BluetoothSetting struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BluetoothSetting) Reset()         { *m = BluetoothSetting{} }
func (m *BluetoothSetting) String() string { return proto.CompactTextString(m) }
func (*BluetoothSetting) ProtoMessage()    {}
func (*BluetoothSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{41}
}
func (m *BluetoothSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BluetoothSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BluetoothSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BluetoothSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BluetoothSetting.Merge(m, src)
}
func (m *BluetoothSetting) XXX_Size() int {
	return m.Size()
}
func (m *BluetoothSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_BluetoothSetting.DiscardUnknown(m)
}

var xxx_messageInfo_BluetoothSetting proto.InternalMessageInfo

func (m *BluetoothSetting) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type ApplicationAttributesSetting struct {
	Identifier            string                 `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ApplicationAttributes *ApplicationAttributes `protobuf:"bytes,2,opt,name=application_attributes,json=applicationAttributes,proto3" json:"application_attributes,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *ApplicationAttributesSetting) Reset()         { *m = ApplicationAttributesSetting{} }
func (m *ApplicationAttributesSetting) String() string { return proto.CompactTextString(m) }
func (*ApplicationAttributesSetting) ProtoMessage()    {}
func (*ApplicationAttributesSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{42}
}
func (m *ApplicationAttributesSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationAttributesSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationAttributesSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationAttributesSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationAttributesSetting.Merge(m, src)
}
func (m *ApplicationAttributesSetting) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationAttributesSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationAttributesSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationAttributesSetting proto.InternalMessageInfo

func (m *ApplicationAttributesSetting) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ApplicationAttributesSetting) GetApplicationAttributes() *ApplicationAttributes {
	if m != nil {
		return m.ApplicationAttributes
	}
	return nil
}

type ApplicationConfigurationSetting struct {
	Identifier                  string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ConfigurationDictionaryData []byte   `protobuf:"bytes,2,opt,name=configuration_dictionary_data,json=configurationDictionaryData,proto3" json:"configuration_dictionary_data,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *ApplicationConfigurationSetting) Reset()         { *m = ApplicationConfigurationSetting{} }
func (m *ApplicationConfigurationSetting) String() string { return proto.CompactTextString(m) }
func (*ApplicationConfigurationSetting) ProtoMessage()    {}
func (*ApplicationConfigurationSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{43}
}
func (m *ApplicationConfigurationSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationConfigurationSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationConfigurationSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationConfigurationSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationConfigurationSetting.Merge(m, src)
}
func (m *ApplicationConfigurationSetting) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationConfigurationSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationConfigurationSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationConfigurationSetting proto.InternalMessageInfo

func (m *ApplicationConfigurationSetting) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ApplicationConfigurationSetting) GetConfigurationDictionaryData() []byte {
	if m != nil {
		return m.ConfigurationDictionaryData
	}
	return nil
}

type ApplicationAttributes struct {
	VpnUuid              string   `protobuf:"bytes,1,opt,name=vpn_uuid,json=vpnUuid,proto3" json:"vpn_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationAttributes) Reset()         { *m = ApplicationAttributes{} }
func (m *ApplicationAttributes) String() string { return proto.CompactTextString(m) }
func (*ApplicationAttributes) ProtoMessage()    {}
func (*ApplicationAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{44}
}
func (m *ApplicationAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationAttributes.Merge(m, src)
}
func (m *ApplicationAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationAttributes proto.InternalMessageInfo

func (m *ApplicationAttributes) GetVpnUuid() string {
	if m != nil {
		return m.VpnUuid
	}
	return ""
}

type DeviceNameSetting struct {
	DeviceName           string   `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceNameSetting) Reset()         { *m = DeviceNameSetting{} }
func (m *DeviceNameSetting) String() string { return proto.CompactTextString(m) }
func (*DeviceNameSetting) ProtoMessage()    {}
func (*DeviceNameSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{45}
}
func (m *DeviceNameSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceNameSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceNameSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceNameSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceNameSetting.Merge(m, src)
}
func (m *DeviceNameSetting) XXX_Size() int {
	return m.Size()
}
func (m *DeviceNameSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceNameSetting.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceNameSetting proto.InternalMessageInfo

func (m *DeviceNameSetting) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type HostnameSetting struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostnameSetting) Reset()         { *m = HostnameSetting{} }
func (m *HostnameSetting) String() string { return proto.CompactTextString(m) }
func (*HostnameSetting) ProtoMessage()    {}
func (*HostnameSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{46}
}
func (m *HostnameSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostnameSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostnameSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostnameSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostnameSetting.Merge(m, src)
}
func (m *HostnameSetting) XXX_Size() int {
	return m.Size()
}
func (m *HostnameSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_HostnameSetting.DiscardUnknown(m)
}

var xxx_messageInfo_HostnameSetting proto.InternalMessageInfo

func (m *HostnameSetting) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type MDMOptionsSetting struct {
	MdmOptions           *MDMOptions `protobuf:"bytes,1,opt,name=mdm_options,json=mdmOptions,proto3" json:"mdm_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MDMOptionsSetting) Reset()         { *m = MDMOptionsSetting{} }
func (m *MDMOptionsSetting) String() string { return proto.CompactTextString(m) }
func (*MDMOptionsSetting) ProtoMessage()    {}
func (*MDMOptionsSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{47}
}
func (m *MDMOptionsSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MDMOptionsSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MDMOptionsSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MDMOptionsSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDMOptionsSetting.Merge(m, src)
}
func (m *MDMOptionsSetting) XXX_Size() int {
	return m.Size()
}
func (m *MDMOptionsSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_MDMOptionsSetting.DiscardUnknown(m)
}

var xxx_messageInfo_MDMOptionsSetting proto.InternalMessageInfo

func (m *MDMOptionsSetting) GetMdmOptions() *MDMOptions {
	if m != nil {
		return m.MdmOptions
	}
	return nil
}

type MDMOptions struct {
	ActivationLockAllowedWhileSupervised bool     `protobuf:"varint,1,opt,name=activation_lock_allowed_while_supervised,json=activationLockAllowedWhileSupervised,proto3" json:"activation_lock_allowed_while_supervised,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{} `json:"-"`
	XXX_unrecognized                     []byte   `json:"-"`
	XXX_sizecache                        int32    `json:"-"`
}

func (m *MDMOptions) Reset()         { *m = MDMOptions{} }
func (m *MDMOptions) String() string { return proto.CompactTextString(m) }
func (*MDMOptions) ProtoMessage()    {}
func (*MDMOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{48}
}
func (m *MDMOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MDMOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MDMOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MDMOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDMOptions.Merge(m, src)
}
func (m *MDMOptions) XXX_Size() int {
	return m.Size()
}
func (m *MDMOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MDMOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MDMOptions proto.InternalMessageInfo

func (m *MDMOptions) GetActivationLockAllowedWhileSupervised() bool {
	if m != nil {
		return m.ActivationLockAllowedWhileSupervised
	}
	return false
}

type PasscodeLockGracePeriodSetting struct {
	PasscodeLockGracePeriod int64    `protobuf:"varint,1,opt,name=passcode_lock_grace_period,json=passcodeLockGracePeriod,proto3" json:"passcode_lock_grace_period,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *PasscodeLockGracePeriodSetting) Reset()         { *m = PasscodeLockGracePeriodSetting{} }
func (m *PasscodeLockGracePeriodSetting) String() string { return proto.CompactTextString(m) }
func (*PasscodeLockGracePeriodSetting) ProtoMessage()    {}
func (*PasscodeLockGracePeriodSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{49}
}
func (m *PasscodeLockGracePeriodSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasscodeLockGracePeriodSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasscodeLockGracePeriodSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasscodeLockGracePeriodSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasscodeLockGracePeriodSetting.Merge(m, src)
}
func (m *PasscodeLockGracePeriodSetting) XXX_Size() int {
	return m.Size()
}
func (m *PasscodeLockGracePeriodSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PasscodeLockGracePeriodSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PasscodeLockGracePeriodSetting proto.InternalMessageInfo

func (m *PasscodeLockGracePeriodSetting) GetPasscodeLockGracePeriod() int64 {
	if m != nil {
		return m.PasscodeLockGracePeriod
	}
	return 0
}

type MaximumResidentUsersSetting struct {
	MaximumResidentUsers int64    `protobuf:"varint,1,opt,name=maximum_resident_users,json=maximumResidentUsers,proto3" json:"maximum_resident_users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaximumResidentUsersSetting) Reset()         { *m = MaximumResidentUsersSetting{} }
func (m *MaximumResidentUsersSetting) String() string { return proto.CompactTextString(m) }
func (*MaximumResidentUsersSetting) ProtoMessage()    {}
func (*MaximumResidentUsersSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{50}
}
func (m *MaximumResidentUsersSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaximumResidentUsersSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaximumResidentUsersSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaximumResidentUsersSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaximumResidentUsersSetting.Merge(m, src)
}
func (m *MaximumResidentUsersSetting) XXX_Size() int {
	return m.Size()
}
func (m *MaximumResidentUsersSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_MaximumResidentUsersSetting.DiscardUnknown(m)
}

var xxx_messageInfo_MaximumResidentUsersSetting proto.InternalMessageInfo

func (m *MaximumResidentUsersSetting) GetMaximumResidentUsers() int64 {
	if m != nil {
		return m.MaximumResidentUsers
	}
	return 0
}

type DiagnosticSubmissionSetting struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiagnosticSubmissionSetting) Reset()         { *m = DiagnosticSubmissionSetting{} }
func (m *DiagnosticSubmissionSetting) String() string { return proto.CompactTextString(m) }
func (*DiagnosticSubmissionSetting) ProtoMessage()    {}
func (*DiagnosticSubmissionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{51}
}
func (m *DiagnosticSubmissionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiagnosticSubmissionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiagnosticSubmissionSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiagnosticSubmissionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticSubmissionSetting.Merge(m, src)
}
func (m *DiagnosticSubmissionSetting) XXX_Size() int {
	return m.Size()
}
func (m *DiagnosticSubmissionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticSubmissionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticSubmissionSetting proto.InternalMessageInfo

func (m *DiagnosticSubmissionSetting) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type AppAnalyticsSetting struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppAnalyticsSetting) Reset()         { *m = AppAnalyticsSetting{} }
func (m *AppAnalyticsSetting) String() string { return proto.CompactTextString(m) }
func (*AppAnalyticsSetting) ProtoMessage()    {}
func (*AppAnalyticsSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{52}
}
func (m *AppAnalyticsSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppAnalyticsSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppAnalyticsSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppAnalyticsSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppAnalyticsSetting.Merge(m, src)
}
func (m *AppAnalyticsSetting) XXX_Size() int {
	return m.Size()
}
func (m *AppAnalyticsSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_AppAnalyticsSetting.DiscardUnknown(m)
}

var xxx_messageInfo_AppAnalyticsSetting proto.InternalMessageInfo

func (m *AppAnalyticsSetting) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type ManagedApplicationConfiguration struct {
	Identifiers          []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagedApplicationConfiguration) Reset()         { *m = ManagedApplicationConfiguration{} }
func (m *ManagedApplicationConfiguration) String() string { return proto.CompactTextString(m) }
func (*ManagedApplicationConfiguration) ProtoMessage()    {}
func (*ManagedApplicationConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{53}
}
func (m *ManagedApplicationConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagedApplicationConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagedApplicationConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagedApplicationConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedApplicationConfiguration.Merge(m, src)
}
func (m *ManagedApplicationConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ManagedApplicationConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedApplicationConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedApplicationConfiguration proto.InternalMessageInfo

func (m *ManagedApplicationConfiguration) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

type ManagedApplicationAttributes struct {
	Identifiers          []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagedApplicationAttributes) Reset()         { *m = ManagedApplicationAttributes{} }
func (m *ManagedApplicationAttributes) String() string { return proto.CompactTextString(m) }
func (*ManagedApplicationAttributes) ProtoMessage()    {}
func (*ManagedApplicationAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{54}
}
func (m *ManagedApplicationAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagedApplicationAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagedApplicationAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagedApplicationAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedApplicationAttributes.Merge(m, src)
}
func (m *ManagedApplicationAttributes) XXX_Size() int {
	return m.Size()
}
func (m *ManagedApplicationAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedApplicationAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedApplicationAttributes proto.InternalMessageInfo

func (m *ManagedApplicationAttributes) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

type ManagedApplicationFeedback struct {
	Identifiers          []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	DeleteFeedback       bool     `protobuf:"varint,2,opt,name=delete_feedback,json=deleteFeedback,proto3" json:"delete_feedback,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagedApplicationFeedback) Reset()         { *m = ManagedApplicationFeedback{} }
func (m *ManagedApplicationFeedback) String() string { return proto.CompactTextString(m) }
func (*ManagedApplicationFeedback) ProtoMessage()    {}
func (*ManagedApplicationFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{55}
}
func (m *ManagedApplicationFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagedApplicationFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagedApplicationFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagedApplicationFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedApplicationFeedback.Merge(m, src)
}
func (m *ManagedApplicationFeedback) XXX_Size() int {
	return m.Size()
}
func (m *ManagedApplicationFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedApplicationFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedApplicationFeedback proto.InternalMessageInfo

func (m *ManagedApplicationFeedback) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func (m *ManagedApplicationFeedback) GetDeleteFeedback() bool {
	if m != nil {
		return m.DeleteFeedback
	}
	return false
}

type SetFirmwarePassword struct {
	CurrentPassword      string   `protobuf:"bytes,1,opt,name=current_password,json=currentPassword,proto3" json:"current_password,omitempty"`
	NewPassword          string   `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	AllowOroms           bool     `protobuf:"varint,3,opt,name=allow_oroms,json=allowOroms,proto3" json:"allow_oroms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetFirmwarePassword) Reset()         { *m = SetFirmwarePassword{} }
func (m *SetFirmwarePassword) String() string { return proto.CompactTextString(m) }
func (*SetFirmwarePassword) ProtoMessage()    {}
func (*SetFirmwarePassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{56}
}
func (m *SetFirmwarePassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetFirmwarePassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetFirmwarePassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetFirmwarePassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetFirmwarePassword.Merge(m, src)
}
func (m *SetFirmwarePassword) XXX_Size() int {
	return m.Size()
}
func (m *SetFirmwarePassword) XXX_DiscardUnknown() {
	xxx_messageInfo_SetFirmwarePassword.DiscardUnknown(m)
}

var xxx_messageInfo_SetFirmwarePassword proto.InternalMessageInfo

func (m *SetFirmwarePassword) GetCurrentPassword() string {
	if m != nil {
		return m.CurrentPassword
	}
	return ""
}

func (m *SetFirmwarePassword) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func (m *SetFirmwarePassword) GetAllowOroms() bool {
	if m != nil {
		return m.AllowOroms
	}
	return false
}

type VerifyFirmwarePassword struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyFirmwarePassword) Reset()         { *m = VerifyFirmwarePassword{} }
func (m *VerifyFirmwarePassword) String() string { return proto.CompactTextString(m) }
func (*VerifyFirmwarePassword) ProtoMessage()    {}
func (*VerifyFirmwarePassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{57}
}
func (m *VerifyFirmwarePassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyFirmwarePassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyFirmwarePassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyFirmwarePassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyFirmwarePassword.Merge(m, src)
}
func (m *VerifyFirmwarePassword) XXX_Size() int {
	return m.Size()
}
func (m *VerifyFirmwarePassword) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyFirmwarePassword.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyFirmwarePassword proto.InternalMessageInfo

func (m *VerifyFirmwarePassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SetAutoAdminPassword struct {
	Guid                 string   `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	PasswordHash         []byte   `protobuf:"bytes,2,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetAutoAdminPassword) Reset()         { *m = SetAutoAdminPassword{} }
func (m *SetAutoAdminPassword) String() string { return proto.CompactTextString(m) }
func (*SetAutoAdminPassword) ProtoMessage()    {}
func (*SetAutoAdminPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{58}
}
func (m *SetAutoAdminPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetAutoAdminPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetAutoAdminPassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetAutoAdminPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAutoAdminPassword.Merge(m, src)
}
func (m *SetAutoAdminPassword) XXX_Size() int {
	return m.Size()
}
func (m *SetAutoAdminPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAutoAdminPassword.DiscardUnknown(m)
}

var xxx_messageInfo_SetAutoAdminPassword proto.InternalMessageInfo

func (m *SetAutoAdminPassword) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

func (m *SetAutoAdminPassword) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

type ScheduleOSUpdate struct {
	Updates              []*Update `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ScheduleOSUpdate) Reset()         { *m = ScheduleOSUpdate{} }
func (m *ScheduleOSUpdate) String() string { return proto.CompactTextString(m) }
func (*ScheduleOSUpdate) ProtoMessage()    {}
func (*ScheduleOSUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{59}
}
func (m *ScheduleOSUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleOSUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleOSUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleOSUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleOSUpdate.Merge(m, src)
}
func (m *ScheduleOSUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleOSUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleOSUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleOSUpdate proto.InternalMessageInfo

func (m *ScheduleOSUpdate) GetUpdates() []*Update {
	if m != nil {
		return m.Updates
	}
	return nil
}

type Update struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=product_key,json=productKey,proto3" json:"product_key,omitempty"`
	ProductVersion       string   `protobuf:"bytes,2,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
	InstallAction        string   `protobuf:"bytes,3,opt,name=install_action,json=installAction,proto3" json:"install_action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{60}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *Update) GetProductVersion() string {
	if m != nil {
		return m.ProductVersion
	}
	return ""
}

func (m *Update) GetInstallAction() string {
	if m != nil {
		return m.InstallAction
	}
	return ""
}

type ScheduleOSUpdateScan struct {
	Force                bool     `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleOSUpdateScan) Reset()         { *m = ScheduleOSUpdateScan{} }
func (m *ScheduleOSUpdateScan) String() string { return proto.CompactTextString(m) }
func (*ScheduleOSUpdateScan) ProtoMessage()    {}
func (*ScheduleOSUpdateScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{61}
}
func (m *ScheduleOSUpdateScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleOSUpdateScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleOSUpdateScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleOSUpdateScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleOSUpdateScan.Merge(m, src)
}
func (m *ScheduleOSUpdateScan) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleOSUpdateScan) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleOSUpdateScan.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleOSUpdateScan proto.InternalMessageInfo

func (m *ScheduleOSUpdateScan) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type ActiveNSExtensions struct {
	FilterExtensionPoints []string `protobuf:"bytes,1,rep,name=filter_extension_points,json=filterExtensionPoints,proto3" json:"filter_extension_points,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ActiveNSExtensions) Reset()         { *m = ActiveNSExtensions{} }
func (m *ActiveNSExtensions) String() string { return proto.CompactTextString(m) }
func (*ActiveNSExtensions) ProtoMessage()    {}
func (*ActiveNSExtensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{62}
}
func (m *ActiveNSExtensions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveNSExtensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveNSExtensions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveNSExtensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveNSExtensions.Merge(m, src)
}
func (m *ActiveNSExtensions) XXX_Size() int {
	return m.Size()
}
func (m *ActiveNSExtensions) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveNSExtensions.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveNSExtensions proto.InternalMessageInfo

func (m *ActiveNSExtensions) GetFilterExtensionPoints() []string {
	if m != nil {
		return m.FilterExtensionPoints
	}
	return nil
}

type RotateFileVaultKey struct {
	KeyType                    string           `protobuf:"bytes,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	FilevaultUnlock            *FileVaultUnlock `protobuf:"bytes,2,opt,name=filevault_unlock,json=filevaultUnlock,proto3" json:"filevault_unlock,omitempty"`
	NewCertificate             []byte           `protobuf:"bytes,3,opt,name=new_certificate,json=newCertificate,proto3" json:"new_certificate,omitempty"`
	ReplyEncryptionCertificate []byte           `protobuf:"bytes,4,opt,name=reply_encryption_certificate,json=replyEncryptionCertificate,proto3" json:"reply_encryption_certificate,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}         `json:"-"`
	XXX_unrecognized           []byte           `json:"-"`
	XXX_sizecache              int32            `json:"-"`
}

func (m *RotateFileVaultKey) Reset()         { *m = RotateFileVaultKey{} }
func (m *RotateFileVaultKey) String() string { return proto.CompactTextString(m) }
func (*RotateFileVaultKey) ProtoMessage()    {}
func (*RotateFileVaultKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{63}
}
func (m *RotateFileVaultKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RotateFileVaultKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RotateFileVaultKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RotateFileVaultKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RotateFileVaultKey.Merge(m, src)
}
func (m *RotateFileVaultKey) XXX_Size() int {
	return m.Size()
}
func (m *RotateFileVaultKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RotateFileVaultKey.DiscardUnknown(m)
}

var xxx_messageInfo_RotateFileVaultKey proto.InternalMessageInfo

func (m *RotateFileVaultKey) GetKeyType() string {
	if m != nil {
		return m.KeyType
	}
	return ""
}

func (m *RotateFileVaultKey) GetFilevaultUnlock() *FileVaultUnlock {
	if m != nil {
		return m.FilevaultUnlock
	}
	return nil
}

func (m *RotateFileVaultKey) GetNewCertificate() []byte {
	if m != nil {
		return m.NewCertificate
	}
	return nil
}

func (m *RotateFileVaultKey) GetReplyEncryptionCertificate() []byte {
	if m != nil {
		return m.ReplyEncryptionCertificate
	}
	return nil
}

type FileVaultUnlock struct {
	Password                 string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	PrivateKeyExport         []byte   `protobuf:"bytes,2,opt,name=private_key_export,json=privateKeyExport,proto3" json:"private_key_export,omitempty"`
	PrivateKeyExportPassword string   `protobuf:"bytes,3,opt,name=private_key_export_password,json=privateKeyExportPassword,proto3" json:"private_key_export_password,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *FileVaultUnlock) Reset()         { *m = FileVaultUnlock{} }
func (m *FileVaultUnlock) String() string { return proto.CompactTextString(m) }
func (*FileVaultUnlock) ProtoMessage()    {}
func (*FileVaultUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{64}
}
func (m *FileVaultUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileVaultUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileVaultUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileVaultUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileVaultUnlock.Merge(m, src)
}
func (m *FileVaultUnlock) XXX_Size() int {
	return m.Size()
}
func (m *FileVaultUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FileVaultUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_FileVaultUnlock proto.InternalMessageInfo

func (m *FileVaultUnlock) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *FileVaultUnlock) GetPrivateKeyExport() []byte {
	if m != nil {
		return m.PrivateKeyExport
	}
	return nil
}

func (m *FileVaultUnlock) GetPrivateKeyExportPassword() string {
	if m != nil {
		return m.PrivateKeyExportPassword
	}
	return ""
}

type SetBootstrapToken struct {
	BootstrapToken       string   `protobuf:"bytes,1,opt,name=bootstrap_token,json=bootstrapToken,proto3" json:"bootstrap_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBootstrapToken) Reset()         { *m = SetBootstrapToken{} }
func (m *SetBootstrapToken) String() string { return proto.CompactTextString(m) }
func (*SetBootstrapToken) ProtoMessage()    {}
func (*SetBootstrapToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{65}
}
func (m *SetBootstrapToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBootstrapToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBootstrapToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBootstrapToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBootstrapToken.Merge(m, src)
}
func (m *SetBootstrapToken) XXX_Size() int {
	return m.Size()
}
func (m *SetBootstrapToken) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBootstrapToken.DiscardUnknown(m)
}

var xxx_messageInfo_SetBootstrapToken proto.InternalMessageInfo

func (m *SetBootstrapToken) GetBootstrapToken() string {
	if m != nil {
		return m.BootstrapToken
	}
	return ""
}

type ResultPayload struct {
	Udid                 string        `protobuf:"bytes,1,opt,name=udid,proto3" json:"udid,omitempty"`
	CommandUuid          string        `protobuf:"bytes,2,opt,name=command_uuid,json=commandUuid,proto3" json:"command_uuid,omitempty"`
	ErrorChain           []*ErrorChain `protobuf:"bytes,3,rep,name=error_chain,json=errorChain,proto3" json:"error_chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResultPayload) Reset()         { *m = ResultPayload{} }
func (m *ResultPayload) String() string { return proto.CompactTextString(m) }
func (*ResultPayload) ProtoMessage()    {}
func (*ResultPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{66}
}
func (m *ResultPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultPayload.Merge(m, src)
}
func (m *ResultPayload) XXX_Size() int {
	return m.Size()
}
func (m *ResultPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ResultPayload proto.InternalMessageInfo

func (m *ResultPayload) GetUdid() string {
	if m != nil {
		return m.Udid
	}
	return ""
}

func (m *ResultPayload) GetCommandUuid() string {
	if m != nil {
		return m.CommandUuid
	}
	return ""
}

func (m *ResultPayload) GetErrorChain() []*ErrorChain {
	if m != nil {
		return m.ErrorChain
	}
	return nil
}

type ErrorChain struct {
	LocalizedDescription string `protobuf:"bytes,1,opt,name=localized_description,json=localizedDescription,proto3" json:"localized_description,omitempty"`
	UsEnglishDescription string `protobuf:"bytes,2,opt,name=us_english_description,json=usEnglishDescription,proto3" json:"us_english_description,omitempty"`
	// The ErrorDomain and ErrorCode keys contain internal codes used by Apple
	// that may be useful for diagnostics. Your host should not rely on these
	// values, as they may change between software releases.
	ErrorDomain          string   `protobuf:"bytes,3,opt,name=error_domain,json=errorDomain,proto3" json:"error_domain,omitempty"`
	ErrorCode            int32    `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorChain) Reset()         { *m = ErrorChain{} }
func (m *ErrorChain) String() string { return proto.CompactTextString(m) }
func (*ErrorChain) ProtoMessage()    {}
func (*ErrorChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1fa389f704dbf7, []int{67}
}
func (m *ErrorChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorChain.Merge(m, src)
}
func (m *ErrorChain) XXX_Size() int {
	return m.Size()
}
func (m *ErrorChain) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorChain.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorChain proto.InternalMessageInfo

func (m *ErrorChain) GetLocalizedDescription() string {
	if m != nil {
		return m.LocalizedDescription
	}
	return ""
}

func (m *ErrorChain) GetUsEnglishDescription() string {
	if m != nil {
		return m.UsEnglishDescription
	}
	return ""
}

func (m *ErrorChain) GetErrorDomain() string {
	if m != nil {
		return m.ErrorDomain
	}
	return ""
}

func (m *ErrorChain) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterEnum("mdmproto.ResultPayload_Status", ResultPayload_Status_name, ResultPayload_Status_value)
	proto.RegisterType((*CommandPayload)(nil), "mdmproto.CommandPayload")
	proto.RegisterType((*Command)(nil), "mdmproto.Command")
	proto.RegisterType((*InstallProfile)(nil), "mdmproto.InstallProfile")
	proto.RegisterType((*RemoveProfile)(nil), "mdmproto.RemoveProfile")
	proto.RegisterType((*InstallProvisioningProfile)(nil), "mdmproto.InstallProvisioningProfile")
	proto.RegisterType((*RemoveProvisioningProfile)(nil), "mdmproto.RemoveProvisioningProfile")
	proto.RegisterType((*InstalledApplicationList)(nil), "mdmproto.InstalledApplicationList")
	proto.RegisterType((*DeviceInformation)(nil), "mdmproto.DeviceInformation")
	proto.RegisterType((*ClearPasscode)(nil), "mdmproto.ClearPasscode")
	proto.RegisterType((*DeviceLock)(nil), "mdmproto.DeviceLock")
	proto.RegisterType((*EraseDevice)(nil), "mdmproto.EraseDevice")
	proto.RegisterType((*RequestMirroring)(nil), "mdmproto.RequestMirroring")
	proto.RegisterType((*Restrictions)(nil), "mdmproto.Restrictions")
	proto.RegisterType((*UnlockUserAccount)(nil), "mdmproto.UnlockUserAccount")
	proto.RegisterType((*DeleteUser)(nil), "mdmproto.DeleteUser")
	proto.RegisterType((*EnableLostMode)(nil), "mdmproto.EnableLostMode")
	proto.RegisterType((*InstallApplication)(nil), "mdmproto.InstallApplication")
	proto.RegisterType((*InstallApplicationOptions)(nil), "mdmproto.InstallApplicationOptions")
	proto.RegisterType((*InstallApplicationConfiguration)(nil), "mdmproto.InstallApplicationConfiguration")
	proto.RegisterType((*InstallApplicationAttributes)(nil), "mdmproto.InstallApplicationAttributes")
	proto.RegisterType((*InstallEnterpriseApplication)(nil), "mdmproto.InstallEnterpriseApplication")
	proto.RegisterType((*Manifest)(nil), "mdmproto.Manifest")
	proto.RegisterType((*ManifestItem)(nil), "mdmproto.ManifestItem")
	proto.RegisterType((*Asset)(nil), "mdmproto.Asset")
	proto.RegisterType((*Metadata)(nil), "mdmproto.Metadata")
	proto.RegisterType((*BundleInfo)(nil), "mdmproto.BundleInfo")
	proto.RegisterType((*ApplyRedemptionCode)(nil), "mdmproto.ApplyRedemptionCode")
	proto.RegisterType((*ManagedApplicationList)(nil), "mdmproto.ManagedApplicationList")
	proto.RegisterType((*RemoveApplication)(nil), "mdmproto.RemoveApplication")
	proto.RegisterType((*InviteToProgram)(nil), "mdmproto.InviteToProgram")
	proto.RegisterType((*ValidateApplications)(nil), "mdmproto.ValidateApplications")
	proto.RegisterType((*AccountConfiguration)(nil), "mdmproto.AccountConfiguration")
	proto.RegisterType((*AutoSetupAdminAccounts)(nil), "mdmproto.AutoSetupAdminAccounts")
	proto.RegisterType((*InstallMedia)(nil), "mdmproto.InstallMedia")
	proto.RegisterType((*RemoveMedia)(nil), "mdmproto.RemoveMedia")
	proto.RegisterType((*Settings)(nil), "mdmproto.Settings")
	proto.RegisterType((*Setting)(nil), "mdmproto.Setting")
	proto.RegisterType((*VoiceRoamingSetting)(nil), "mdmproto.VoiceRoamingSetting")
	proto.RegisterType((*PersonalHotspotSetting)(nil), "mdmproto.PersonalHotspotSetting")
	proto.RegisterType((*WallpaperSetting)(nil), "mdmproto.WallpaperSetting")
	proto.RegisterType((*DataRoamingSetting)(nil), "mdmproto.DataRoamingSetting")
	proto.RegisterType((*BluetoothSetting)(nil), "mdmproto.BluetoothSetting")
	proto.RegisterType((*ApplicationAttributesSetting)(nil), "mdmproto.ApplicationAttributesSetting")
	proto.RegisterType((*ApplicationConfigurationSetting)(nil), "mdmproto.ApplicationConfigurationSetting")
	proto.RegisterType((*ApplicationAttributes)(nil), "mdmproto.ApplicationAttributes")
	proto.RegisterType((*DeviceNameSetting)(nil), "mdmproto.DeviceNameSetting")
	proto.RegisterType((*HostnameSetting)(nil), "mdmproto.HostnameSetting")
	proto.RegisterType((*MDMOptionsSetting)(nil), "mdmproto.MDMOptionsSetting")
	proto.RegisterType((*MDMOptions)(nil), "mdmproto.MDMOptions")
	proto.RegisterType((*PasscodeLockGracePeriodSetting)(nil), "mdmproto.PasscodeLockGracePeriodSetting")
	proto.RegisterType((*MaximumResidentUsersSetting)(nil), "mdmproto.MaximumResidentUsersSetting")
	proto.RegisterType((*DiagnosticSubmissionSetting)(nil), "mdmproto.DiagnosticSubmissionSetting")
	proto.RegisterType((*AppAnalyticsSetting)(nil), "mdmproto.AppAnalyticsSetting")
	proto.RegisterType((*ManagedApplicationConfiguration)(nil), "mdmproto.ManagedApplicationConfiguration")
	proto.RegisterType((*ManagedApplicationAttributes)(nil), "mdmproto.ManagedApplicationAttributes")
	proto.RegisterType((*ManagedApplicationFeedback)(nil), "mdmproto.ManagedApplicationFeedback")
	proto.RegisterType((*SetFirmwarePassword)(nil), "mdmproto.SetFirmwarePassword")
	proto.RegisterType((*VerifyFirmwarePassword)(nil), "mdmproto.VerifyFirmwarePassword")
	proto.RegisterType((*SetAutoAdminPassword)(nil), "mdmproto.SetAutoAdminPassword")
	proto.RegisterType((*ScheduleOSUpdate)(nil), "mdmproto.ScheduleOSUpdate")
	proto.RegisterType((*Update)(nil), "mdmproto.Update")
	proto.RegisterType((*ScheduleOSUpdateScan)(nil), "mdmproto.ScheduleOSUpdateScan")
	proto.RegisterType((*ActiveNSExtensions)(nil), "mdmproto.ActiveNSExtensions")
	proto.RegisterType((*RotateFileVaultKey)(nil), "mdmproto.RotateFileVaultKey")
	proto.RegisterType((*FileVaultUnlock)(nil), "mdmproto.FileVaultUnlock")
	proto.RegisterType((*SetBootstrapToken)(nil), "mdmproto.SetBootstrapToken")
	proto.RegisterType((*ResultPayload)(nil), "mdmproto.ResultPayload")
	proto.RegisterType((*ErrorChain)(nil), "mdmproto.ErrorChain")
}

func init() { proto.RegisterFile("mdm.proto", fileDescriptor_fd1fa389f704dbf7) }

var fileDescriptor_fd1fa389f704dbf7 = []byte{
	// 3797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xcd, 0x73, 0x1b, 0x47,
	0x76, 0x27, 0x48, 0x8a, 0x04, 0x1e, 0x40, 0x12, 0x6c, 0x7e, 0x08, 0x24, 0x25, 0x52, 0x1a, 0xd9,
	0x6b, 0xd9, 0x6b, 0x4b, 0x89, 0x6c, 0x79, 0xbd, 0xbb, 0x76, 0x62, 0x8a, 0x94, 0x96, 0x5c, 0x8b,
	0x22, 0x6b, 0x20, 0xc9, 0x55, 0x71, 0x36, 0xb3, 0x43, 0x4c, 0x13, 0xe8, 0xe2, 0x7c, 0x6d, 0xf7,
	0x0c, 0x68, 0xf8, 0x9c, 0x54, 0xce, 0xb9, 0x24, 0xa9, 0x5c, 0x72, 0x4f, 0xe5, 0x1f, 0x48, 0x6e,
	0xb9, 0xe5, 0x98, 0xca, 0x5f, 0xe0, 0x72, 0xfe, 0x85, 0x5c, 0x72, 0x4b, 0xbd, 0xfe, 0x98, 0x19,
	0x0c, 0x86, 0xa0, 0x2e, 0x7b, 0x43, 0xbf, 0xf7, 0xeb, 0xd7, 0x3d, 0xaf, 0xbb, 0xdf, 0x27, 0xa0,
	0x11, 0x78, 0xc1, 0xa3, 0x98, 0x47, 0x49, 0x44, 0xea, 0x81, 0x17, 0xc8, 0x5f, 0xd6, 0xef, 0x61,
	0xf9, 0x20, 0x0a, 0x02, 0x37, 0xf4, 0xce, 0xdc, 0x91, 0x1f, 0xb9, 0x1e, 0xb9, 0x0f, 0xad, 0x9e,
	0xa2, 0x38, 0x69, 0xca, 0xbc, 0x4e, 0xed, 0x5e, 0xed, 0x61, 0xc3, 0x6e, 0x6a, 0xda, 0x9b, 0x94,
	0x79, 0xe4, 0xe7, 0xb0, 0xa8, 0x87, 0x9d, 0xd9, 0x7b, 0xb5, 0x87, 0xcd, 0x27, 0xab, 0x8f, 0x8c,
	0xc0, 0x47, 0x5a, 0x9a, 0x6d, 0x10, 0xd6, 0xbf, 0xde, 0x86, 0x45, 0x4d, 0x44, 0xd9, 0x9c, 0xfe,
	0x21, 0xa5, 0x22, 0x71, 0x92, 0x51, 0x4c, 0x8d, 0x6c, 0x4d, 0x7b, 0x3d, 0x8a, 0x29, 0x39, 0x80,
	0x15, 0x16, 0x8a, 0xc4, 0xf5, 0x7d, 0x27, 0xe6, 0xd1, 0x05, 0xf3, 0xa9, 0x5e, 0xa3, 0x93, 0xaf,
	0x71, 0xac, 0x00, 0x67, 0x8a, 0x7f, 0x34, 0x63, 0x2f, 0xb3, 0x31, 0x0a, 0xf9, 0x1a, 0x96, 0x39,
	0x0d, 0xa2, 0x21, 0xcd, 0x64, 0xcc, 0x49, 0x19, 0xb7, 0x73, 0x19, 0xb6, 0xe4, 0xe7, 0x22, 0x96,
	0x78, 0x91, 0x40, 0x06, 0x70, 0xa7, 0xb0, 0x8d, 0x21, 0x13, 0x2c, 0x0a, 0x59, 0xd8, 0xcf, 0xe4,
	0xcd, 0x4b, 0x79, 0xef, 0x55, 0xed, 0x29, 0x03, 0xe7, 0xc2, 0xb7, 0xd9, 0xb5, 0x5c, 0x42, 0x61,
	0xa7, 0xb8, 0xd7, 0xf2, 0x42, 0xb7, 0xe4, 0x42, 0x0f, 0x2a, 0x36, 0x5e, 0xb1, 0xce, 0x56, 0xe1,
	0x23, 0x4a, 0xcb, 0x9c, 0x83, 0xd9, 0x04, 0xf5, 0x1c, 0x37, 0x8e, 0x7d, 0xd6, 0x73, 0x13, 0x16,
	0x85, 0x8e, 0xcf, 0x44, 0xd2, 0x59, 0x90, 0xab, 0x58, 0x13, 0x9f, 0x43, 0xbd, 0xfd, 0x1c, 0xfa,
	0x92, 0x89, 0xe4, 0x68, 0xc6, 0xee, 0xb0, 0x6b, 0x78, 0xe4, 0x25, 0x10, 0x8f, 0x0e, 0x59, 0x8f,
	0x3a, 0x2c, 0xbc, 0x88, 0x78, 0x20, 0x39, 0x9d, 0x45, 0x29, 0x7b, 0x27, 0x97, 0x7d, 0x28, 0x31,
	0xc7, 0x39, 0xe4, 0x68, 0xc6, 0x5e, 0xf5, 0xca, 0x44, 0xf2, 0x0b, 0x68, 0x6a, 0x69, 0x7e, 0xd4,
	0xbb, 0xec, 0xd4, 0xa5, 0x98, 0xf5, 0xb2, 0x98, 0x97, 0x51, 0xef, 0xf2, 0x68, 0xc6, 0x06, 0x2f,
	0x1b, 0xe1, 0xe9, 0xf7, 0x7c, 0xea, 0x72, 0x27, 0x76, 0x85, 0xe8, 0x45, 0x1e, 0xed, 0x34, 0xca,
	0xa7, 0x7f, 0x80, 0xfc, 0x33, 0xcd, 0xc6, 0xd3, 0xef, 0x15, 0x09, 0xe4, 0x57, 0xd0, 0xa2, 0xdc,
	0x15, 0xd4, 0x51, 0x52, 0x3b, 0x20, 0xe7, 0x6f, 0xe4, 0xf3, 0x9f, 0x23, 0x57, 0x6d, 0xe0, 0x68,
	0xc6, 0x6e, 0xd2, 0x7c, 0x48, 0x8e, 0x61, 0xd5, 0xdc, 0xf1, 0x80, 0x71, 0x1e, 0x71, 0x16, 0xf6,
	0x3b, 0x4d, 0x29, 0x60, 0xbb, 0x78, 0x8a, 0x12, 0x72, 0x62, 0x10, 0x47, 0x33, 0x76, 0x9b, 0x97,
	0x68, 0xe4, 0x4b, 0x7c, 0x2e, 0x22, 0xe1, 0xac, 0x87, 0x0a, 0x11, 0x9d, 0x96, 0x94, 0xb2, 0x59,
	0x94, 0x92, 0x73, 0x8f, 0x66, 0xec, 0x31, 0x34, 0x39, 0x81, 0xb5, 0x34, 0x44, 0xd5, 0x39, 0xa9,
	0xa0, 0xdc, 0x71, 0x7b, 0xbd, 0x28, 0x0d, 0x93, 0xce, 0x52, 0xf9, 0x38, 0xde, 0x48, 0xd0, 0x1b,
	0x41, 0xf9, 0xbe, 0x82, 0xe0, 0x71, 0xa4, 0x65, 0xa2, 0x3a, 0x0e, 0x9f, 0x26, 0x54, 0x8a, 0xeb,
	0x2c, 0x4f, 0x1e, 0x07, 0x32, 0x71, 0x86, 0x3a, 0x0e, 0x33, 0x22, 0x87, 0xd0, 0xa6, 0xa1, 0x7b,
	0xee, 0xe3, 0x39, 0xa2, 0x52, 0xf0, 0x40, 0x56, 0xca, 0x4f, 0xfa, 0xb9, 0x44, 0xbc, 0x8c, 0x44,
	0x72, 0xa2, 0x4e, 0x64, 0x99, 0x8e, 0x51, 0xc8, 0x29, 0xac, 0x99, 0x07, 0x59, 0xb8, 0xbd, 0x9d,
	0xb6, 0x14, 0x74, 0x67, 0xe2, 0xe2, 0x16, 0xae, 0xe6, 0xd1, 0x8c, 0x4d, 0xd8, 0x04, 0x95, 0xbc,
	0x81, 0x0d, 0xad, 0x12, 0xa7, 0x17, 0x85, 0x17, 0xac, 0x9f, 0x72, 0x25, 0x72, 0x55, 0x8a, 0xdc,
	0xcd, 0x45, 0x6a, 0x0d, 0x1c, 0x14, 0x51, 0x47, 0x33, 0xf6, 0xba, 0x5b, 0x41, 0x27, 0x5d, 0xd8,
	0xc0, 0xfd, 0x8d, 0x1c, 0x4e, 0x3d, 0x1a, 0xc4, 0xf2, 0x89, 0xc9, 0x3b, 0x48, 0xa4, 0xd8, 0xbb,
	0x05, 0xb1, 0x08, 0xb3, 0x33, 0xd4, 0x81, 0xfa, 0xee, 0x35, 0x77, 0x92, 0x4c, 0xfe, 0x12, 0x3a,
	0x81, 0x1b, 0xba, 0xfd, 0xaa, 0xa7, 0xbb, 0x26, 0xe5, 0xde, 0xcb, 0xe5, 0x9e, 0x28, 0xe4, 0xe4,
	0xc3, 0xdd, 0x0c, 0x2a, 0x39, 0xf8, 0x6c, 0xb5, 0x05, 0x2a, 0x6a, 0x76, 0xbd, 0x7c, 0x4f, 0x94,
	0xe1, 0x19, 0x57, 0xec, 0x2a, 0x2f, 0x13, 0xc9, 0x6f, 0x60, 0x95, 0x85, 0x43, 0x96, 0x50, 0x27,
	0x89, 0xd0, 0x8a, 0xf5, 0xb9, 0x1b, 0x74, 0x36, 0xa4, 0xb0, 0xad, 0xe2, 0x31, 0x21, 0xe4, 0x75,
	0x74, 0xa6, 0x00, 0x47, 0x33, 0xf6, 0x0a, 0x1b, 0x27, 0xe1, 0x01, 0x0d, 0x5d, 0x9f, 0x79, 0x6e,
	0xe2, 0x16, 0x37, 0x26, 0x3a, 0x9b, 0xe5, 0x03, 0x7a, 0xab, 0x60, 0xc5, 0x6d, 0xe0, 0x73, 0x58,
	0x37, 0xd3, 0x8b, 0x74, 0xf2, 0x15, 0x2c, 0x99, 0x8b, 0x14, 0x50, 0x8f, 0xb9, 0x9d, 0xdb, 0xe5,
	0x57, 0xa5, 0xaf, 0xd0, 0x09, 0x72, 0xf1, 0x55, 0xb1, 0xc2, 0x18, 0x4d, 0x83, 0x56, 0x96, 0x9a,
	0xdd, 0x29, 0x9b, 0x06, 0xa5, 0x26, 0x33, 0xb9, 0xc9, 0xf3, 0x21, 0xf9, 0x13, 0xa8, 0x0b, 0x9a,
	0x24, 0x2c, 0xec, 0x8b, 0xce, 0x96, 0x9c, 0x47, 0xf2, 0x79, 0x5d, 0xcd, 0x39, 0x9a, 0xb1, 0x33,
	0x14, 0xb9, 0x82, 0xfb, 0x55, 0x07, 0x3f, 0x7e, 0x61, 0xb7, 0xa5, 0xa8, 0x0f, 0xa7, 0xdd, 0x80,
	0xf2, 0xdd, 0xdd, 0x0b, 0xa6, 0x43, 0x48, 0x08, 0xbb, 0x55, 0x0b, 0xbb, 0x49, 0xc2, 0xd9, 0x79,
	0x9a, 0x50, 0xd1, 0xd9, 0x91, 0xab, 0xfe, 0x6c, 0xda, 0xaa, 0xfb, 0x19, 0xfa, 0x68, 0xc6, 0xbe,
	0x13, 0x4c, 0xe1, 0xa3, 0xbf, 0xad, 0x5a, 0xef, 0x82, 0x52, 0xef, 0xdc, 0xed, 0x5d, 0x76, 0xee,
	0x94, 0xfd, 0xed, 0xe4, 0x6a, 0x2f, 0x34, 0x16, 0xfd, 0x6d, 0x70, 0x2d, 0x17, 0x1f, 0xa8, 0xa0,
	0x89, 0x73, 0xc1, 0x78, 0x70, 0xe5, 0x72, 0x2a, 0x9d, 0xc4, 0x55, 0xc4, 0xbd, 0xce, 0xdd, 0xf2,
	0x03, 0xed, 0xd2, 0xe4, 0x85, 0x46, 0x9d, 0x69, 0x10, 0x3e, 0x50, 0x31, 0x49, 0xc6, 0x07, 0x3a,
	0xa4, 0x9c, 0x5d, 0x8c, 0x2a, 0xe4, 0xee, 0x96, 0x1f, 0xe8, 0x5b, 0x89, 0xac, 0x10, 0xbd, 0x39,
	0xac, 0xe4, 0x90, 0x6f, 0xe1, 0x36, 0x6e, 0xd9, 0x4d, 0x93, 0xc8, 0x71, 0xbd, 0x80, 0x85, 0xb9,
	0xf0, 0xbd, 0xf2, 0x5b, 0xe8, 0xd2, 0x64, 0x3f, 0x4d, 0xa2, 0x7d, 0x84, 0x15, 0x44, 0xaf, 0x8b,
	0x0a, 0x3a, 0xf9, 0x2d, 0x10, 0xd1, 0x1b, 0x50, 0x2f, 0xf5, 0xa9, 0x13, 0x09, 0x27, 0x8d, 0xf1,
	0x15, 0x75, 0xee, 0x95, 0x9d, 0x55, 0x57, 0x63, 0x4e, 0xbb, 0x6f, 0x24, 0x02, 0x9d, 0x95, 0x99,
	0x77, 0x2a, 0x14, 0x4d, 0x6e, 0x72, 0x42, 0x96, 0x23, 0x7a, 0x6e, 0xd8, 0xb9, 0x3f, 0xb1, 0xc9,
	0x92, 0xc0, 0x6e, 0xcf, 0x95, 0x16, 0xb5, 0x2c, 0x14, 0xe9, 0xe4, 0x0c, 0xd6, 0xdd, 0x5e, 0xc2,
	0x86, 0xd4, 0x09, 0x85, 0x43, 0xbf, 0x4f, 0x68, 0x28, 0xa4, 0x19, 0xb0, 0xca, 0xa6, 0x7f, 0x5f,
	0xa2, 0x5e, 0x75, 0x9f, 0x67, 0x18, 0x34, 0xfd, 0x6a, 0xee, 0x2b, 0x91, 0x53, 0x51, 0x22, 0x8f,
	0x12, 0xdc, 0x1e, 0x86, 0x46, 0x43, 0x37, 0xf5, 0x13, 0xe7, 0x92, 0x8e, 0x3a, 0x0f, 0xca, 0x12,
	0x6d, 0x89, 0x7a, 0xc1, 0x7c, 0xfa, 0x16, 0x41, 0xdf, 0xd0, 0x11, 0x4a, 0xe4, 0x19, 0x75, 0xa8,
	0xa9, 0xf8, 0x5c, 0x8c, 0x51, 0xa1, 0x61, 0x42, 0x79, 0xcc, 0x99, 0x18, 0x37, 0xa7, 0xef, 0x95,
	0x9f, 0x8b, 0xb6, 0x32, 0xcf, 0x33, 0xf8, 0xb8, 0x65, 0x35, 0xe1, 0x67, 0x25, 0x1f, 0x7d, 0x3b,
	0xde, 0x88, 0xf3, 0x28, 0x4a, 0x44, 0xc2, 0xdd, 0xd8, 0x49, 0xa2, 0x4b, 0x1a, 0x76, 0xde, 0x2f,
	0xdb, 0xec, 0x2e, 0x4d, 0x9e, 0x19, 0xcc, 0x6b, 0x84, 0xa0, 0xcd, 0x16, 0x65, 0xe2, 0xb3, 0x06,
	0x2c, 0xea, 0xe0, 0xc3, 0xfa, 0x08, 0x96, 0xc7, 0xc3, 0x6b, 0xd2, 0x81, 0xc5, 0x58, 0xe5, 0x06,
	0x32, 0x5e, 0x6f, 0xd9, 0x66, 0x68, 0x3d, 0x86, 0xa5, 0xb1, 0x30, 0x9a, 0xec, 0x02, 0x30, 0x8f,
	0x86, 0x09, 0xbb, 0x60, 0x94, 0xeb, 0xe8, 0xbe, 0x40, 0xb1, 0x4e, 0x61, 0xfb, 0xfa, 0x38, 0x99,
	0xfc, 0x29, 0xac, 0x57, 0xc6, 0xda, 0x6a, 0xd5, 0xb5, 0x78, 0x72, 0x8a, 0xf5, 0x18, 0xb6, 0xae,
	0x8d, 0x87, 0x09, 0x81, 0xf9, 0x42, 0x06, 0x23, 0x7f, 0x5b, 0x03, 0xe8, 0x5c, 0x17, 0xda, 0x92,
	0x7b, 0xd0, 0xcc, 0xf7, 0x2a, 0x3a, 0xb5, 0x7b, 0x73, 0x98, 0x9c, 0x14, 0x48, 0xe4, 0x23, 0x58,
	0x2d, 0x58, 0x29, 0xe1, 0x44, 0xa1, 0x3f, 0x92, 0xe9, 0x49, 0xdd, 0x5e, 0xc9, 0x4d, 0x8e, 0x38,
	0x0d, 0xfd, 0x91, 0xf5, 0x09, 0xac, 0x4e, 0x04, 0xba, 0xa8, 0xcb, 0x3f, 0xa4, 0x94, 0x33, 0x6a,
	0xc4, 0x9b, 0xa1, 0xf5, 0x04, 0x96, 0xc6, 0x82, 0x52, 0xcc, 0x95, 0x74, 0xf8, 0xa6, 0xce, 0x56,
	0x69, 0xa1, 0xa9, 0x68, 0xf2, 0xd8, 0xac, 0xef, 0x00, 0xf2, 0x20, 0x98, 0xb4, 0x61, 0x2e, 0x66,
	0xa1, 0xfe, 0x5a, 0xfc, 0x89, 0xab, 0x05, 0x54, 0x08, 0xb7, 0xaf, 0x72, 0xa8, 0x86, 0x6d, 0x86,
	0x28, 0x3c, 0x1e, 0x44, 0x21, 0x75, 0xc2, 0x34, 0x38, 0xa7, 0x5c, 0xa6, 0x47, 0x0d, 0xbb, 0x29,
	0x69, 0xaf, 0x24, 0xc9, 0xfa, 0xdb, 0x1a, 0x34, 0x0b, 0x61, 0x6e, 0x85, 0xf8, 0x8f, 0x81, 0xc4,
	0x9c, 0x0a, 0xca, 0x87, 0xd4, 0x91, 0x5e, 0x3a, 0xf6, 0xdd, 0x50, 0xab, 0xa3, 0x6d, 0x38, 0x87,
	0x6e, 0xe2, 0x9e, 0xf9, 0x6e, 0x48, 0xbe, 0x80, 0x8e, 0xc7, 0x84, 0xeb, 0xfb, 0xd1, 0x15, 0x9e,
	0xec, 0xf7, 0x2c, 0x60, 0xc9, 0xc8, 0x11, 0x34, 0x49, 0x63, 0xb9, 0x7c, 0xdd, 0xde, 0x34, 0xfc,
	0x33, 0xc3, 0xee, 0x22, 0xd7, 0xfa, 0x97, 0x1a, 0xb4, 0xcb, 0xf1, 0x32, 0xf9, 0x10, 0xda, 0x1e,
	0x15, 0x09, 0x0b, 0x95, 0xa3, 0x08, 0xdd, 0xc0, 0xa4, 0x93, 0x2b, 0x05, 0xfa, 0x2b, 0x37, 0xa0,
	0xe4, 0x09, 0x6c, 0x14, 0xa1, 0x26, 0x45, 0xf1, 0xb4, 0x52, 0xd6, 0x0a, 0x4c, 0x7d, 0x62, 0x1e,
	0xd9, 0x81, 0x06, 0x9a, 0x2e, 0x27, 0x61, 0x01, 0xd5, 0xda, 0xa9, 0x23, 0xe1, 0x35, 0x0b, 0x28,
	0xd9, 0x86, 0x7a, 0x66, 0x80, 0xe7, 0x15, 0xcf, 0x8c, 0xad, 0x7d, 0x68, 0x15, 0xa3, 0x72, 0x7d,
	0xa9, 0xf1, 0x3e, 0x3a, 0x63, 0xb1, 0x7c, 0x4d, 0x7e, 0xf2, 0x9a, 0xe6, 0x15, 0xa7, 0x58, 0x8f,
	0x61, 0x75, 0x22, 0x26, 0xc7, 0x35, 0x31, 0xee, 0x2e, 0x7c, 0x67, 0x36, 0xb6, 0x4e, 0xf1, 0x1e,
	0x64, 0xf1, 0xf6, 0x14, 0x24, 0x79, 0x1f, 0x96, 0x2f, 0x22, 0xde, 0xc3, 0xc4, 0xc6, 0xa7, 0xd2,
	0x2e, 0xa9, 0xe3, 0x5a, 0x92, 0xd4, 0x43, 0x4d, 0xb4, 0x18, 0x2c, 0x8f, 0x07, 0xe4, 0xc5, 0xab,
	0x54, 0x9b, 0x7e, 0x95, 0x66, 0x27, 0xae, 0x12, 0xee, 0xe8, 0x22, 0x8a, 0x92, 0x30, 0x4a, 0x32,
	0x5d, 0x9a, 0xb1, 0xf5, 0xef, 0x73, 0x40, 0x26, 0x63, 0x76, 0xf2, 0x33, 0x58, 0x61, 0x49, 0x1a,
	0x52, 0xe1, 0x88, 0x24, 0xe2, 0xf2, 0xb4, 0x70, 0xdd, 0x39, 0x7b, 0x49, 0x91, 0xbb, 0x48, 0x3d,
	0xf6, 0x4a, 0x16, 0x67, 0xb6, 0x6c, 0x71, 0xc8, 0x57, 0xb0, 0x18, 0xc5, 0x4a, 0xe3, 0x73, 0xe5,
	0x4c, 0x7a, 0x72, 0xd9, 0x53, 0x05, 0xb5, 0xcd, 0x1c, 0xfc, 0xb8, 0xc0, 0x0d, 0xd9, 0x05, 0x66,
	0x73, 0x29, 0xf7, 0xf5, 0x69, 0x37, 0x0d, 0xed, 0x0d, 0xf7, 0xf1, 0x22, 0xaa, 0xa7, 0x1f, 0xd0,
	0x30, 0x71, 0x2e, 0x7c, 0xb7, 0x2f, 0x64, 0xd2, 0x3e, 0x67, 0x4c, 0x02, 0xd2, 0x5f, 0x20, 0x99,
	0x9c, 0xc2, 0xd2, 0x78, 0xe4, 0xb6, 0x50, 0x8e, 0xdc, 0x26, 0xb7, 0x34, 0x16, 0x96, 0xd9, 0xe3,
	0xf3, 0xc9, 0x0b, 0x80, 0x42, 0x44, 0xb6, 0x78, 0x8d, 0x8b, 0xa9, 0x8c, 0xb8, 0xec, 0xc2, 0x4c,
	0xf2, 0x39, 0xdc, 0xee, 0x0d, 0xdc, 0xb0, 0x4f, 0x9d, 0xc2, 0xa7, 0x08, 0xf4, 0x72, 0x32, 0xed,
	0x6e, 0xd8, 0x1b, 0x8a, 0x7d, 0x92, 0x71, 0xbb, 0xc8, 0xb4, 0x0e, 0x61, 0xeb, 0x5a, 0x25, 0x92,
	0x0f, 0x60, 0x25, 0x4e, 0x79, 0x6f, 0x80, 0x79, 0x74, 0x40, 0x93, 0x41, 0x64, 0x8e, 0x70, 0xd9,
	0x90, 0x4f, 0x24, 0xd5, 0xba, 0x0f, 0x7b, 0x37, 0x7c, 0xb7, 0xb5, 0x0b, 0x77, 0xa6, 0x7d, 0x8c,
	0xf5, 0x7f, 0xb5, 0x0c, 0x50, 0xed, 0x30, 0x1f, 0x41, 0xdd, 0x1c, 0x9a, 0xdc, 0xc5, 0x58, 0xe8,
	0x7d, 0xa2, 0x39, 0x76, 0x86, 0x99, 0x38, 0xf8, 0xd9, 0xc9, 0x83, 0xff, 0x35, 0x6c, 0x17, 0x21,
	0x4e, 0xcc, 0x42, 0xe9, 0xb6, 0x7a, 0x94, 0x27, 0x78, 0xdb, 0xe6, 0x1e, 0xb6, 0xec, 0xdb, 0x85,
	0x09, 0x67, 0x8a, 0x7f, 0x80, 0x6c, 0x72, 0x0c, 0xf7, 0x0d, 0x9e, 0xd3, 0x61, 0x64, 0xe2, 0xfa,
	0x01, 0xed, 0x5d, 0x3a, 0xe8, 0x8a, 0x19, 0xa7, 0xca, 0xb6, 0xd4, 0xed, 0x5d, 0x0d, 0xb4, 0x33,
	0xdc, 0x01, 0xc2, 0x6c, 0x8d, 0xb2, 0x8e, 0xa1, 0x6e, 0x3e, 0x80, 0x7c, 0x05, 0xcb, 0xd9, 0x9e,
	0x58, 0x42, 0x03, 0xe5, 0x66, 0xc6, 0xb2, 0x1b, 0x83, 0x3d, 0x4e, 0x68, 0x60, 0x2f, 0x05, 0x85,
	0x91, 0xb0, 0xfa, 0xd0, 0x2a, 0xb2, 0xc9, 0x07, 0xb0, 0xe0, 0x0a, 0x41, 0x13, 0x23, 0x66, 0xa5,
	0x10, 0x6c, 0x21, 0xdd, 0xd6, 0x6c, 0xa9, 0x5e, 0x9a, 0xb8, 0xe8, 0x05, 0x74, 0xb9, 0xae, 0xa8,
	0x5e, 0xcd, 0xb1, 0x33, 0x8c, 0xf5, 0x0f, 0x35, 0xb8, 0x25, 0x25, 0xa0, 0x93, 0xbe, 0x64, 0x61,
	0xe6, 0xa4, 0xf1, 0x37, 0xd9, 0x82, 0x7a, 0xe0, 0x3d, 0x75, 0x04, 0xfb, 0x41, 0x39, 0xae, 0x39,
	0x7b, 0x31, 0xf0, 0x9e, 0x76, 0xd9, 0x0f, 0xd2, 0xa7, 0x07, 0xde, 0x53, 0xa5, 0xde, 0x86, 0x2d,
	0x7f, 0xa3, 0x67, 0xca, 0xdf, 0x26, 0xfe, 0x24, 0x7b, 0xd0, 0x14, 0x03, 0xf7, 0xc9, 0xd3, 0xcf,
	0x95, 0x0c, 0xf5, 0x1c, 0x41, 0x91, 0xa4, 0x98, 0x0e, 0x2c, 0xaa, 0x91, 0xe8, 0x2c, 0x28, 0x3f,
	0xac, 0x87, 0xd6, 0xff, 0xd6, 0xa0, 0x6e, 0x36, 0x4c, 0x7e, 0x0e, 0xab, 0xe7, 0x69, 0xe8, 0xf9,
	0x68, 0x7f, 0x4a, 0x61, 0x4d, 0x5b, 0x31, 0x8e, 0x73, 0x53, 0xf3, 0x3e, 0x2c, 0x6b, 0xf0, 0x90,
	0x72, 0x61, 0x6c, 0x6b, 0xc3, 0x5e, 0x52, 0xd4, 0xb7, 0x8a, 0x48, 0x3e, 0x82, 0x5b, 0xea, 0x64,
	0xe6, 0xa4, 0x4a, 0x0b, 0x15, 0x94, 0x67, 0x4a, 0x62, 0x78, 0x11, 0xd9, 0x0a, 0x92, 0x29, 0x67,
	0xbe, 0xa0, 0x9c, 0x6d, 0xa8, 0x8b, 0xf4, 0x3c, 0x61, 0x89, 0x2e, 0x0e, 0xa2, 0x63, 0xd2, 0x63,
	0xb2, 0x0e, 0xb7, 0x14, 0x63, 0x41, 0x32, 0xd4, 0x80, 0x58, 0xb0, 0x84, 0x6a, 0x70, 0x58, 0xe8,
	0x9c, 0x8f, 0x8c, 0xa1, 0x98, 0xb3, 0x9b, 0x48, 0x3c, 0x0e, 0x9f, 0x21, 0xc9, 0xfa, 0x3d, 0x40,
	0xbe, 0xfc, 0x1f, 0xe3, 0xbb, 0xad, 0xbf, 0x82, 0xb5, 0x8a, 0x8a, 0xc7, 0x4d, 0x21, 0x23, 0x5a,
	0x91, 0x72, 0x25, 0x45, 0x89, 0x5f, 0xe6, 0x63, 0x82, 0xac, 0x5f, 0xc1, 0x66, 0x75, 0xe5, 0xe3,
	0xe6, 0xb8, 0xce, 0xfa, 0x14, 0x56, 0x27, 0xaa, 0x1b, 0x37, 0x06, 0xb3, 0xdf, 0xc2, 0x4a, 0xa9,
	0x8a, 0x41, 0xee, 0x02, 0xe8, 0x8a, 0x87, 0x93, 0xc5, 0x9d, 0x0d, 0x4d, 0x39, 0xf6, 0x50, 0x53,
	0xb2, 0xc8, 0xa1, 0x1e, 0x7b, 0x6e, 0x56, 0x96, 0x72, 0xea, 0x1b, 0xee, 0x5b, 0x5f, 0xc0, 0x7a,
	0x55, 0x45, 0xe3, 0x1d, 0xbe, 0xe3, 0x9f, 0xe7, 0x61, 0xbd, 0xaa, 0x5a, 0x45, 0x5e, 0xc2, 0x03,
	0x71, 0xc9, 0x62, 0x27, 0xe6, 0x2c, 0x70, 0xb9, 0x0e, 0xbb, 0x9c, 0xac, 0xfe, 0xc5, 0xa9, 0xf2,
	0x47, 0x2a, 0x28, 0xd9, 0x43, 0xe8, 0x99, 0x42, 0xca, 0x08, 0xcc, 0x88, 0xd4, 0x30, 0xf2, 0x16,
	0x3e, 0xc4, 0xec, 0xa3, 0x5a, 0x98, 0x2b, 0x1c, 0x4e, 0xfb, 0xa9, 0xef, 0x72, 0x55, 0x28, 0x54,
	0x01, 0xc6, 0x03, 0x41, 0x93, 0x0a, 0x91, 0xfb, 0xc2, 0x56, 0x58, 0x19, 0xb9, 0x74, 0xe1, 0x03,
	0x2f, 0x0a, 0x75, 0xa2, 0x1b, 0x47, 0x71, 0xea, 0x63, 0x8e, 0x66, 0x96, 0x31, 0x0b, 0xb0, 0xf0,
	0x22, 0xd2, 0xa6, 0xd1, 0x42, 0x38, 0xa6, 0xb5, 0x67, 0x1a, 0xac, 0x97, 0xd0, 0xd2, 0xe5, 0x5d,
	0xfe, 0x25, 0x6c, 0xc9, 0x28, 0xba, 0x52, 0xcc, 0x2d, 0x15, 0x78, 0x22, 0xa0, 0x7a, 0x6a, 0x79,
	0xd6, 0x45, 0xea, 0xfb, 0x2a, 0xd8, 0x54, 0x4f, 0x6c, 0x33, 0x1e, 0x9b, 0xf6, 0x22, 0xf5, 0x7d,
	0x19, 0x73, 0x56, 0x4c, 0x95, 0x55, 0x58, 0x39, 0x75, 0xb1, 0x6a, 0x2a, 0x6a, 0x40, 0x4e, 0xfd,
	0x0e, 0xb6, 0xa4, 0x02, 0xb4, 0x5a, 0x65, 0xbe, 0xaf, 0x65, 0x18, 0xa3, 0x51, 0x28, 0x26, 0xe0,
	0xd7, 0x2b, 0x8d, 0x22, 0x50, 0xcb, 0x12, 0xf6, 0xa6, 0x5b, 0x49, 0xb7, 0xfe, 0xae, 0x06, 0x9b,
	0xd5, 0x53, 0xf0, 0xf2, 0x8a, 0x41, 0xc4, 0x93, 0x62, 0x2c, 0xdd, 0x90, 0x14, 0xb9, 0xad, 0x1d,
	0x68, 0xe4, 0x1f, 0x3f, 0xab, 0xa3, 0x38, 0xf3, 0xb9, 0x0f, 0x60, 0xc9, 0x44, 0xc0, 0xce, 0xc0,
	0x15, 0x03, 0x19, 0x6c, 0xb5, 0xec, 0x96, 0x21, 0x1e, 0xb9, 0x62, 0x40, 0x36, 0x61, 0x61, 0xc0,
	0x3c, 0x8f, 0x86, 0xfa, 0xf4, 0xf4, 0xc8, 0xe2, 0xd0, 0x2a, 0x96, 0xdc, 0xde, 0x39, 0xf6, 0xdb,
	0x81, 0x86, 0xac, 0xc1, 0x15, 0x5e, 0x52, 0x5d, 0x12, 0xd0, 0x3b, 0xdf, 0x05, 0x50, 0x4c, 0xd9,
	0x68, 0x52, 0x51, 0xa7, 0x82, 0xbf, 0x1e, 0xc5, 0xd4, 0x1a, 0x41, 0xb3, 0x50, 0xa8, 0x2b, 0xa1,
	0x6b, 0x25, 0x74, 0xd5, 0x8e, 0x66, 0xab, 0x76, 0x84, 0x6a, 0x40, 0x73, 0x27, 0x12, 0x0c, 0xa0,
	0x98, 0xa7, 0xd7, 0x6d, 0xe5, 0xc4, 0x63, 0xcf, 0xfa, 0x25, 0xd4, 0x4d, 0xad, 0x8f, 0x7c, 0x52,
	0xa8, 0x08, 0x2a, 0x17, 0xbb, 0x3a, 0x51, 0x11, 0xcc, 0xcb, 0x81, 0xd6, 0x7f, 0xd4, 0x61, 0x51,
	0x53, 0xd1, 0x37, 0xa0, 0x93, 0x30, 0x8e, 0x13, 0x7f, 0x93, 0x2f, 0xb3, 0x96, 0x49, 0x76, 0x4a,
	0x15, 0x9d, 0x17, 0x3c, 0x31, 0x23, 0x5b, 0xf7, 0x4d, 0xe4, 0x21, 0x3e, 0x85, 0xfa, 0x20, 0x12,
	0x89, 0x9c, 0x3a, 0x57, 0x2e, 0xd8, 0x1e, 0x69, 0x4e, 0xb6, 0x29, 0x03, 0x25, 0xcf, 0x60, 0x69,
	0x18, 0xe1, 0x9a, 0x3c, 0x72, 0x03, 0x16, 0xf6, 0x75, 0x6f, 0xac, 0x50, 0x48, 0x7b, 0x8b, 0x6c,
	0x5b, 0x71, 0xcd, 0xfc, 0xd6, 0xb0, 0x40, 0x24, 0xdf, 0x40, 0x1b, 0x75, 0x14, 0x85, 0xae, 0xef,
	0x0c, 0xa2, 0x44, 0xc4, 0x51, 0xa2, 0x3b, 0x5f, 0x85, 0xab, 0x7e, 0xa6, 0x11, 0x47, 0x0a, 0x60,
	0x24, 0xad, 0xc4, 0xe3, 0x74, 0xf2, 0x05, 0x34, 0xae, 0x5c, 0xdf, 0x8f, 0xdd, 0x98, 0x72, 0x1d,
	0x62, 0x17, 0x8a, 0x59, 0xdf, 0x1a, 0x96, 0x99, 0x9f, 0x83, 0xc9, 0x9f, 0x43, 0x4b, 0x26, 0xb2,
	0xe6, 0x4b, 0x16, 0xcb, 0x05, 0x21, 0xcc, 0x66, 0x4b, 0x1f, 0xd2, 0xf4, 0x72, 0x1a, 0x2e, 0x7d,
	0xee, 0xa7, 0x34, 0x89, 0xa2, 0x64, 0xa0, 0x3b, 0x56, 0x85, 0xa5, 0x9f, 0x19, 0x56, 0xb6, 0x74,
	0x06, 0x26, 0xbf, 0x83, 0xcd, 0x6b, 0x0a, 0xad, 0x8d, 0x72, 0x58, 0x5f, 0x19, 0x02, 0x1b, 0x91,
	0x1b, 0x6e, 0x65, 0x7d, 0xf5, 0x4b, 0x68, 0x06, 0x5e, 0xe0, 0x98, 0x5c, 0x08, 0xca, 0x37, 0xe3,
	0xe4, 0xf0, 0x44, 0xc7, 0xed, 0xd9, 0xcd, 0x08, 0xbc, 0xc0, 0x84, 0xf2, 0x14, 0xb6, 0x4d, 0x2f,
	0x4d, 0x36, 0xe3, 0x9c, 0x3e, 0x77, 0x7b, 0xd4, 0x89, 0x29, 0x67, 0x91, 0xa7, 0x9b, 0x5b, 0x0f,
	0x0b, 0x07, 0xa5, 0xb1, 0x2f, 0xa3, 0xde, 0xe5, 0x6f, 0x10, 0x79, 0x26, 0x81, 0x46, 0xf2, 0xed,
	0xb8, 0x9a, 0x4f, 0xbe, 0x83, 0xcd, 0xc0, 0xfd, 0x9e, 0x05, 0x69, 0x80, 0xb9, 0xb2, 0x74, 0x6c,
	0xd2, 0x6a, 0x9a, 0xce, 0xd7, 0xfb, 0xc5, 0x28, 0x56, 0xe2, 0x6c, 0x0d, 0x43, 0xe3, 0x99, 0xed,
	0x7c, 0x3d, 0xa8, 0x60, 0x92, 0xbf, 0x80, 0x0d, 0x8f, 0xb9, 0xfd, 0x30, 0x12, 0x09, 0xeb, 0x39,
	0x22, 0x3d, 0x0f, 0x98, 0x90, 0xd1, 0xca, 0x52, 0x59, 0xf6, 0x61, 0x06, 0xeb, 0x66, 0xa8, 0x4c,
	0xb6, 0x57, 0xc1, 0xc4, 0x27, 0xe0, 0xc6, 0xb1, 0xe3, 0x86, 0xae, 0x3f, 0x4a, 0x58, 0x4f, 0xe8,
	0xee, 0xd8, 0x78, 0xb3, 0x67, 0xdf, 0x70, 0xb3, 0x27, 0xe0, 0x16, 0x88, 0xe4, 0x02, 0xb6, 0xae,
	0x2f, 0xf1, 0xaf, 0x94, 0x13, 0xc5, 0xeb, 0x32, 0x25, 0x23, 0xbb, 0xe3, 0x5e, 0x97, 0x4a, 0x3d,
	0x86, 0xb5, 0x8a, 0xf7, 0x88, 0x11, 0xb1, 0xea, 0xb8, 0x79, 0x3a, 0x0a, 0x30, 0x43, 0xeb, 0x09,
	0x6c, 0x56, 0xbf, 0xbc, 0x29, 0x73, 0xfe, 0x0c, 0xda, 0xe5, 0x77, 0x86, 0xc1, 0x29, 0x0b, 0x4c,
	0x01, 0xa1, 0x65, 0xab, 0x01, 0x52, 0xaf, 0x06, 0x94, 0x9b, 0x40, 0x5f, 0x0d, 0xac, 0x47, 0x40,
	0x26, 0x9f, 0xda, 0x94, 0xf5, 0x3e, 0x86, 0x76, 0xf9, 0x71, 0x4d, 0x41, 0xff, 0x7d, 0x0d, 0xee,
	0x4c, 0x7b, 0x44, 0x37, 0x06, 0xa5, 0x6f, 0xaf, 0x7d, 0xac, 0xca, 0xe4, 0xee, 0xdd, 0xf0, 0x58,
	0xaf, 0x79, 0xa5, 0xd6, 0xdf, 0xd4, 0x60, 0xef, 0x86, 0x93, 0xbd, 0x71, 0x6f, 0xcf, 0xe0, 0xee,
	0xd8, 0xdd, 0x71, 0x3c, 0x55, 0x57, 0xc2, 0x50, 0x24, 0xcb, 0xcf, 0x5a, 0xf6, 0xce, 0x18, 0xe8,
	0x30, 0xc3, 0xa0, 0xda, 0xad, 0x27, 0xb0, 0x51, 0xdd, 0xa6, 0xd9, 0x82, 0xfa, 0x30, 0x0e, 0x8b,
	0x7f, 0x0c, 0x59, 0x1c, 0xc6, 0xe1, 0x9b, 0x94, 0x79, 0xd6, 0x67, 0xa6, 0xde, 0x59, 0x70, 0x2f,
	0x98, 0x88, 0x15, 0x1d, 0x92, 0xde, 0x6d, 0xee, 0x73, 0xac, 0x4f, 0x60, 0xa5, 0xe4, 0x59, 0x30,
	0xc1, 0xc9, 0xdc, 0x90, 0xae, 0x5f, 0x99, 0xb1, 0xf5, 0x5b, 0x58, 0x9d, 0xb0, 0x54, 0xe4, 0xe9,
	0xb8, 0x6d, 0xab, 0x95, 0x3b, 0xd3, 0xf9, 0x8c, 0xa2, 0x51, 0xb3, 0x3c, 0x80, 0x9c, 0x43, 0xde,
	0xc2, 0x43, 0xd9, 0x29, 0xd0, 0x9d, 0x55, 0x34, 0x72, 0xb2, 0x16, 0x49, 0x3d, 0xe7, 0x6a, 0xc0,
	0x7c, 0xea, 0x88, 0x34, 0xa6, 0x7c, 0xc8, 0x44, 0x76, 0x9d, 0xde, 0xcb, 0xf1, 0x68, 0xc8, 0xf6,
	0x15, 0xfa, 0x5b, 0x04, 0x77, 0x33, 0xac, 0xf5, 0x3b, 0xd8, 0x9d, 0x6e, 0x0e, 0xc9, 0xaf, 0xa7,
	0x1a, 0x57, 0x15, 0xf9, 0x5c, 0x67, 0x32, 0xad, 0x2e, 0xec, 0x4c, 0x31, 0x85, 0xe4, 0xb3, 0x6b,
	0x2d, 0xaa, 0x92, 0x5b, 0x69, 0x2a, 0xad, 0x5f, 0xc0, 0xce, 0x14, 0x1b, 0x38, 0xe5, 0x61, 0x3d,
	0x96, 0x39, 0x5e, 0xd9, 0xd0, 0x4d, 0x99, 0x70, 0x00, 0x7b, 0x37, 0x34, 0x2b, 0xdf, 0x21, 0xeb,
	0xf9, 0x1a, 0xee, 0x4c, 0xeb, 0x3d, 0xbe, 0x83, 0x84, 0x3e, 0x6c, 0x5f, 0xdf, 0x4f, 0x7c, 0x87,
	0xbe, 0xc0, 0x07, 0xb0, 0xa2, 0xff, 0x1b, 0x91, 0x35, 0x2c, 0x55, 0xda, 0xb3, 0xac, 0xc8, 0x46,
	0x94, 0xf5, 0xd7, 0x35, 0x58, 0xab, 0x68, 0x2b, 0x92, 0x0f, 0xa1, 0xdd, 0x4b, 0x39, 0xc7, 0xe3,
	0xc9, 0x2a, 0xcb, 0xba, 0x9a, 0xad, 0xe9, 0x19, 0xf4, 0x3e, 0xb4, 0x42, 0x7a, 0x95, 0xc3, 0x74,
	0x65, 0x2a, 0xa4, 0x57, 0x19, 0x64, 0x0f, 0x9a, 0xaa, 0xce, 0x1e, 0xf1, 0x28, 0x10, 0xba, 0xba,
	0x0e, 0x92, 0x74, 0x8a, 0x14, 0xeb, 0x33, 0xd8, 0xac, 0x6e, 0x42, 0x8e, 0x95, 0xb6, 0x6b, 0xa5,
	0xd2, 0xf6, 0x29, 0xac, 0x57, 0x75, 0x17, 0x31, 0x12, 0xed, 0x17, 0xfa, 0x2c, 0xf8, 0x7b, 0x32,
	0x21, 0x98, 0x9d, 0x4c, 0x08, 0xd0, 0x4b, 0x94, 0x3b, 0x81, 0xe4, 0x23, 0x58, 0x54, 0xad, 0x43,
	0x13, 0x10, 0xb7, 0x0b, 0xff, 0x54, 0x91, 0x0c, 0xdb, 0x00, 0xac, 0x11, 0x2c, 0xe8, 0x59, 0x7b,
	0xd0, 0x8c, 0x79, 0xe4, 0xa5, 0x3d, 0xd5, 0xc8, 0xd3, 0x76, 0x46, 0x93, 0xbe, 0xa1, 0x23, 0x59,
	0x8c, 0xd4, 0x80, 0xf1, 0x2a, 0xc5, 0xb2, 0x26, 0x9b, 0xf2, 0x8c, 0xcc, 0xd1, 0xf5, 0xff, 0x4c,
	0xa4, 0x4d, 0xd4, 0x31, 0xbc, 0xf9, 0xd3, 0xc0, 0xbe, 0x24, 0x5a, 0x1f, 0xc3, 0x7a, 0x55, 0x13,
	0x13, 0xdd, 0x99, 0x2c, 0xa5, 0xeb, 0x8b, 0xae, 0x06, 0xd6, 0x4b, 0x20, 0x93, 0xcd, 0x49, 0xf2,
	0x39, 0xdc, 0xbe, 0x60, 0x7e, 0x42, 0x79, 0xde, 0xd5, 0x74, 0xe2, 0x88, 0x85, 0x89, 0xb9, 0x63,
	0x1b, 0x8a, 0x9d, 0x4d, 0x39, 0x93, 0x4c, 0xeb, 0xc7, 0x1a, 0x90, 0xc9, 0xce, 0x24, 0xda, 0xe6,
	0x4b, 0x3a, 0x2a, 0x66, 0x30, 0x8b, 0x97, 0x74, 0x24, 0xf3, 0x97, 0x43, 0x68, 0xe7, 0x9d, 0x4e,
	0xd5, 0x41, 0xd2, 0x9e, 0xaa, 0x10, 0xe1, 0x67, 0xc2, 0x54, 0xf3, 0xc1, 0x5e, 0xc9, 0xa6, 0x28,
	0x02, 0xea, 0x10, 0x6f, 0x5e, 0x8f, 0x72, 0xbc, 0xf7, 0x3d, 0x57, 0x57, 0xf3, 0x5b, 0xf6, 0x72,
	0x48, 0xaf, 0x0e, 0x72, 0x2a, 0xf9, 0x1a, 0xee, 0x70, 0x1a, 0xfb, 0x23, 0x87, 0x86, 0x3d, 0x3e,
	0xd2, 0x95, 0x9b, 0xc2, 0xac, 0x79, 0x39, 0x6b, 0x5b, 0x62, 0x9e, 0x67, 0x90, 0x82, 0x04, 0xeb,
	0x9f, 0x6a, 0xb0, 0x52, 0xda, 0xcf, 0xb4, 0xab, 0xa9, 0x5a, 0x51, 0x68, 0x8c, 0x29, 0x9e, 0xbf,
	0x43, 0xbf, 0x8f, 0x23, 0x9e, 0xe8, 0x3b, 0xd7, 0xd6, 0x9c, 0x6f, 0xe8, 0xe8, 0xb9, 0xa4, 0x93,
	0xaf, 0x60, 0x67, 0x12, 0x9d, 0xbf, 0x28, 0x75, 0xe0, 0x9d, 0xf2, 0x34, 0x73, 0xdf, 0xad, 0x2f,
	0x61, 0x75, 0xa2, 0xaf, 0x8a, 0xca, 0x29, 0x77, 0x63, 0xd5, 0x26, 0x97, 0xcf, 0xc7, 0x80, 0xd6,
	0x7f, 0xd7, 0x60, 0xc9, 0xa6, 0x22, 0xf5, 0x13, 0xf3, 0x8f, 0x4b, 0x02, 0xf3, 0xa9, 0x57, 0xe8,
	0x53, 0x7a, 0x6c, 0xf2, 0x5f, 0x98, 0xb3, 0x93, 0xff, 0xc2, 0x7c, 0x0a, 0x4d, 0xca, 0x79, 0xc4,
	0x9d, 0xde, 0xc0, 0x65, 0xe1, 0x64, 0x39, 0xf1, 0x39, 0x32, 0x0f, 0x90, 0x67, 0x03, 0xcd, 0x7e,
	0x5b, 0x5d, 0x58, 0xe8, 0x26, 0x6e, 0x92, 0x0a, 0xd2, 0x86, 0xd6, 0x7e, 0xef, 0x32, 0x8c, 0xae,
	0x7c, 0xea, 0xf5, 0xa9, 0xd7, 0x9e, 0x21, 0x0d, 0xb8, 0x25, 0x67, 0xb5, 0x6b, 0x64, 0x13, 0x88,
	0xfe, 0xd7, 0xe6, 0x0b, 0xd9, 0xbd, 0x54, 0xf4, 0x59, 0x52, 0x87, 0xf9, 0x63, 0xcf, 0xa7, 0xed,
	0x39, 0x02, 0xb0, 0xf0, 0x2a, 0x4a, 0x5e, 0x45, 0x57, 0xed, 0x79, 0xeb, 0xdf, 0x6a, 0x00, 0xf9,
	0x7a, 0xe4, 0x53, 0xd8, 0xf0, 0xa3, 0x9e, 0xeb, 0xb3, 0x1f, 0xa8, 0xe7, 0x78, 0x54, 0xf4, 0x38,
	0x8b, 0xb3, 0x02, 0x53, 0xc3, 0x5e, 0xcf, 0x98, 0x87, 0x39, 0x0f, 0x7d, 0x55, 0x2a, 0x1c, 0x1a,
	0xf6, 0x7d, 0x26, 0x06, 0x63, 0xb3, 0xd4, 0xc7, 0xaf, 0xa7, 0xe2, 0xb9, 0x62, 0x16, 0x67, 0xdd,
	0x87, 0x96, 0xd2, 0x82, 0x17, 0x05, 0x4a, 0x0d, 0x52, 0x51, 0x92, 0x76, 0x28, 0x49, 0x98, 0xdc,
	0x6b, 0x45, 0x45, 0x9e, 0xba, 0x7c, 0xb7, 0xec, 0x86, 0xd2, 0x48, 0xe4, 0xd1, 0x67, 0xed, 0xff,
	0xfc, 0x69, 0xb7, 0xf6, 0x5f, 0x3f, 0xed, 0xd6, 0x7e, 0xfc, 0x69, 0xb7, 0xf6, 0x8f, 0xff, 0xb3,
	0x3b, 0x73, 0xbe, 0x20, 0x15, 0xf8, 0xe9, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xaf, 0xde,
	0x66, 0x32, 0x2b, 0x00, 0x00,
}

func (m *CommandPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommandUuid) > 0 {
		i -= len(m.CommandUuid)
		copy(dAtA[i:], m.CommandUuid)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.CommandUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RequestType) > 0 {
		i -= len(m.RequestType)
		copy(dAtA[i:], m.RequestType)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.RequestType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Command_InstallProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_InstallProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InstallProfile != nil {
		{
			size, err := m.InstallProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Command_RemoveProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RemoveProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveProfile != nil {
		{
			size, err := m.RemoveProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Command_InstallProvisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_InstallProvisioningProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InstallProvisioningProfile != nil {
		{
			size, err := m.InstallProvisioningProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Command_RemoveProfisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RemoveProfisioningProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveProfisioningProfile != nil {
		{
			size, err := m.RemoveProfisioningProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Command_InstalledApplicationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_InstalledApplicationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InstalledApplicationList != nil {
		{
			size, err := m.InstalledApplicationList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Command_DeviceInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_DeviceInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceInformation != nil {
		{
			size, err := m.DeviceInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Command_DeviceLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_DeviceLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceLock != nil {
		{
			size, err := m.DeviceLock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Command_ClearPasscode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ClearPasscode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClearPasscode != nil {
		{
			size, err := m.ClearPasscode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Command_EraseDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_EraseDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EraseDevice != nil {
		{
			size, err := m.EraseDevice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Command_RequestMirroring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RequestMirroring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestMirroring != nil {
		{
			size, err := m.RequestMirroring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Command_Restrictions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_Restrictions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Restrictions != nil {
		{
			size, err := m.Restrictions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Command_UnlockUserAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_UnlockUserAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnlockUserAccount != nil {
		{
			size, err := m.UnlockUserAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Command_DeleteUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_DeleteUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteUser != nil {
		{
			size, err := m.DeleteUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *Command_EnableLostMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_EnableLostMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableLostMode != nil {
		{
			size, err := m.EnableLostMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *Command_InstallApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_InstallApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InstallApplication != nil {
		{
			size, err := m.InstallApplication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Command_AccountConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_AccountConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountConfiguration != nil {
		{
			size, err := m.AccountConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Command_ApplyRedemptionCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ApplyRedemptionCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApplyRedemptionCode != nil {
		{
			size, err := m.ApplyRedemptionCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Command_ManagedApplicationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ManagedApplicationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManagedApplicationList != nil {
		{
			size, err := m.ManagedApplicationList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *Command_RemoveApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RemoveApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveApplication != nil {
		{
			size, err := m.RemoveApplication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Command_InviteToProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_InviteToProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InviteToProgram != nil {
		{
			size, err := m.InviteToProgram.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *Command_ValidataApplications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ValidataApplications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValidataApplications != nil {
		{
			size, err := m.ValidataApplications.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *Command_InstallMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_InstallMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InstallMedia != nil {
		{
			size, err := m.InstallMedia.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *Command_RemoveMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RemoveMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveMedia != nil {
		{
			size, err := m.RemoveMedia.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *Command_Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *Command_ManagedApplicationConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ManagedApplicationConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManagedApplicationConfiguration != nil {
		{
			size, err := m.ManagedApplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *Command_ManagedApplicationAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ManagedApplicationAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManagedApplicationAttributes != nil {
		{
			size, err := m.ManagedApplicationAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *Command_ManagedApplicationFeedback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ManagedApplicationFeedback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManagedApplicationFeedback != nil {
		{
			size, err := m.ManagedApplicationFeedback.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *Command_SetFirmwarePassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_SetFirmwarePassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetFirmwarePassword != nil {
		{
			size, err := m.SetFirmwarePassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *Command_VerifyFirmwarePassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_VerifyFirmwarePassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VerifyFirmwarePassword != nil {
		{
			size, err := m.VerifyFirmwarePassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *Command_SetAutoAdminPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_SetAutoAdminPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetAutoAdminPassword != nil {
		{
			size, err := m.SetAutoAdminPassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *Command_ScheduleOsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ScheduleOsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScheduleOsUpdate != nil {
		{
			size, err := m.ScheduleOsUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Command_ScheduleOsUpdateScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ScheduleOsUpdateScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScheduleOsUpdateScan != nil {
		{
			size, err := m.ScheduleOsUpdateScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Command_ActiveNsExtensions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_ActiveNsExtensions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNsExtensions != nil {
		{
			size, err := m.ActiveNsExtensions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Command_RotateFilevaultKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_RotateFilevaultKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RotateFilevaultKey != nil {
		{
			size, err := m.RotateFilevaultKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *Command_InstallEnterpriseApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_InstallEnterpriseApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InstallEnterpriseApplication != nil {
		{
			size, err := m.InstallEnterpriseApplication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Command_SetBootstrapToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command_SetBootstrapToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetBootstrapToken != nil {
		{
			size, err := m.SetBootstrapToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *InstallProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallProvisioningProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallProvisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallProvisioningProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProvisioningProfile) > 0 {
		i -= len(m.ProvisioningProfile)
		copy(dAtA[i:], m.ProvisioningProfile)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ProvisioningProfile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveProvisioningProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveProvisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveProvisioningProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstalledApplicationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstalledApplicationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstalledApplicationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ManagedAppsOnly {
		i--
		if m.ManagedAppsOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Queries[iNdEx])
			copy(dAtA[i:], m.Queries[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Queries[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClearPasscode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearPasscode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearPasscode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UnlockToken) > 0 {
		i -= len(m.UnlockToken)
		copy(dAtA[i:], m.UnlockToken)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.UnlockToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pin) > 0 {
		i -= len(m.Pin)
		copy(dAtA[i:], m.Pin)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Pin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EraseDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EraseDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EraseDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisallowProximitySetup {
		i--
		if m.DisallowProximitySetup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PreserveDataPlan {
		i--
		if m.PreserveDataPlan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pin) > 0 {
		i -= len(m.Pin)
		copy(dAtA[i:], m.Pin)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Pin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestMirroring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMirroring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMirroring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScanTime) > 0 {
		i -= len(m.ScanTime)
		copy(dAtA[i:], m.ScanTime)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ScanTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationDeviceId) > 0 {
		i -= len(m.DestinationDeviceId)
		copy(dAtA[i:], m.DestinationDeviceId)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.DestinationDeviceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationName) > 0 {
		i -= len(m.DestinationName)
		copy(dAtA[i:], m.DestinationName)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.DestinationName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Restrictions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Restrictions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Restrictions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProfileRestrictions {
		i--
		if m.ProfileRestrictions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnlockUserAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockUserAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockUserAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ForceDeletion {
		i--
		if m.ForceDeletion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableLostMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableLostMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableLostMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Footnote) > 0 {
		i -= len(m.Footnote)
		copy(dAtA[i:], m.Footnote)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Footnote)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChangeManagementState) > 0 {
		i -= len(m.ChangeManagementState)
		copy(dAtA[i:], m.ChangeManagementState)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ChangeManagementState)))
		i--
		dAtA[i] = 0x42
	}
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ManagementFlags != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.ManagementFlags))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ManifestUrl) > 0 {
		i -= len(m.ManifestUrl)
		copy(dAtA[i:], m.ManifestUrl)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ManifestUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItunesStoreId != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.ItunesStoreId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InstallApplicationOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplicationOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallApplicationOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PurchaseMethod != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.PurchaseMethod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InstallApplicationConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplicationConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallApplicationConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InstallApplicationAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplicationAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallApplicationAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InstallEnterpriseApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallEnterpriseApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallEnterpriseApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PinningRevocationCheckRequired {
		i--
		if m.PinningRevocationCheckRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ManifestUrlPinningCerts) > 0 {
		for iNdEx := len(m.ManifestUrlPinningCerts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ManifestUrlPinningCerts[iNdEx])
			copy(dAtA[i:], m.ManifestUrlPinningCerts[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.ManifestUrlPinningCerts[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ManifestUrl) > 0 {
		i -= len(m.ManifestUrl)
		copy(dAtA[i:], m.ManifestUrl)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ManifestUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Manifest != nil {
		{
			size, err := m.Manifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Manifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ManifestItems) > 0 {
		for iNdEx := len(m.ManifestItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManifestItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMdm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ManifestItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMdm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sha256S) > 0 {
		for iNdEx := len(m.Sha256S) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sha256S[iNdEx])
			copy(dAtA[i:], m.Sha256S[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Sha256S[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Sha256Size != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.Sha256Size))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Md5S) > 0 {
		for iNdEx := len(m.Md5S) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Md5S[iNdEx])
			copy(dAtA[i:], m.Md5S[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Md5S[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Md5Size != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.Md5Size))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SizeInBytes != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.SizeInBytes))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMdm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BundleVersion) > 0 {
		i -= len(m.BundleVersion)
		copy(dAtA[i:], m.BundleVersion)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.BundleVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BundleIdentifier) > 0 {
		i -= len(m.BundleIdentifier)
		copy(dAtA[i:], m.BundleIdentifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.BundleIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BundleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BundleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BundleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BundleVersion) > 0 {
		i -= len(m.BundleVersion)
		copy(dAtA[i:], m.BundleVersion)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.BundleVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BundleIdentifier) > 0 {
		i -= len(m.BundleIdentifier)
		copy(dAtA[i:], m.BundleIdentifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.BundleIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyRedemptionCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyRedemptionCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyRedemptionCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RedemptionCode) > 0 {
		i -= len(m.RedemptionCode)
		copy(dAtA[i:], m.RedemptionCode)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.RedemptionCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManagedApplicationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagedApplicationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagedApplicationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemoveApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteToProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteToProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteToProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InvitationUrl) > 0 {
		i -= len(m.InvitationUrl)
		copy(dAtA[i:], m.InvitationUrl)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.InvitationUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateApplications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateApplications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateApplications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrimaryAccountUserName) > 0 {
		i -= len(m.PrimaryAccountUserName)
		copy(dAtA[i:], m.PrimaryAccountUserName)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PrimaryAccountUserName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PrimaryAccountFullName) > 0 {
		i -= len(m.PrimaryAccountFullName)
		copy(dAtA[i:], m.PrimaryAccountFullName)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PrimaryAccountFullName)))
		i--
		dAtA[i] = 0x32
	}
	if m.LockPrimaryAccountInfo {
		i--
		if m.LockPrimaryAccountInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.DontAutoPopulatePrimaryAccountInfo {
		i--
		if m.DontAutoPopulatePrimaryAccountInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.AutoSetupAdminAccounts) > 0 {
		for iNdEx := len(m.AutoSetupAdminAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoSetupAdminAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMdm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SetPrimarySetupAccountAsRegularUser {
		i--
		if m.SetPrimarySetupAccountAsRegularUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SkipPrimarySetupAccountCreation {
		i--
		if m.SkipPrimarySetupAccountCreation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AutoSetupAdminAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoSetupAdminAccounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoSetupAdminAccounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hidden {
		i--
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PasswordHash) > 0 {
		i -= len(m.PasswordHash)
		copy(dAtA[i:], m.PasswordHash)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PasswordHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MediaType) > 0 {
		i -= len(m.MediaType)
		copy(dAtA[i:], m.MediaType)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.MediaType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MediaUrl) > 0 {
		i -= len(m.MediaUrl)
		copy(dAtA[i:], m.MediaUrl)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.MediaUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItunesStoreId != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.ItunesStoreId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PersistentId) > 0 {
		i -= len(m.PersistentId)
		copy(dAtA[i:], m.PersistentId)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PersistentId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ItunesStoreId != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.ItunesStoreId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MediaType) > 0 {
		i -= len(m.MediaType)
		copy(dAtA[i:], m.MediaType)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.MediaType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Settings) > 0 {
		for iNdEx := len(m.Settings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMdm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApplicationConfiguration != nil {
		{
			size, err := m.ApplicationConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.AppAnalytics != nil {
		{
			size, err := m.AppAnalytics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.DiagnosticSubmission != nil {
		{
			size, err := m.DiagnosticSubmission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.MaximumResidentUsers != nil {
		{
			size, err := m.MaximumResidentUsers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.PasscodeLockGracePeriod != nil {
		{
			size, err := m.PasscodeLockGracePeriod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.MdmOptions != nil {
		{
			size, err := m.MdmOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ApplicationAttributes != nil {
		{
			size, err := m.ApplicationAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Bluetooth != nil {
		{
			size, err := m.Bluetooth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DataRoaming != nil {
		{
			size, err := m.DataRoaming.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Wallpaper != nil {
		{
			size, err := m.Wallpaper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PersonalHotspot != nil {
		{
			size, err := m.PersonalHotspot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.VoiceRoaming != nil {
		{
			size, err := m.VoiceRoaming.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Hostname != nil {
		{
			size, err := m.Hostname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceName != nil {
		{
			size, err := m.DeviceName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Item) > 0 {
		i -= len(m.Item)
		copy(dAtA[i:], m.Item)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Item)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoiceRoamingSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoiceRoamingSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoiceRoamingSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersonalHotspotSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalHotspotSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonalHotspotSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WallpaperSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallpaperSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallpaperSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Where != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.Where))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataRoamingSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRoamingSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataRoamingSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BluetoothSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BluetoothSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BluetoothSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationAttributesSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationAttributesSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationAttributesSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApplicationAttributes != nil {
		{
			size, err := m.ApplicationAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationConfigurationSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationConfigurationSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationConfigurationSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfigurationDictionaryData) > 0 {
		i -= len(m.ConfigurationDictionaryData)
		copy(dAtA[i:], m.ConfigurationDictionaryData)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ConfigurationDictionaryData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VpnUuid) > 0 {
		i -= len(m.VpnUuid)
		copy(dAtA[i:], m.VpnUuid)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.VpnUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceNameSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceNameSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceNameSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostnameSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostnameSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostnameSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MDMOptionsSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MDMOptionsSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MDMOptionsSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MdmOptions != nil {
		{
			size, err := m.MdmOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MDMOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MDMOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MDMOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivationLockAllowedWhileSupervised {
		i--
		if m.ActivationLockAllowedWhileSupervised {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PasscodeLockGracePeriodSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasscodeLockGracePeriodSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasscodeLockGracePeriodSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PasscodeLockGracePeriod != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.PasscodeLockGracePeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaximumResidentUsersSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaximumResidentUsersSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaximumResidentUsersSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaximumResidentUsers != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.MaximumResidentUsers))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DiagnosticSubmissionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiagnosticSubmissionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiagnosticSubmissionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppAnalyticsSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppAnalyticsSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppAnalyticsSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManagedApplicationConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagedApplicationConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagedApplicationConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ManagedApplicationAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagedApplicationAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagedApplicationAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ManagedApplicationFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagedApplicationFeedback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagedApplicationFeedback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeleteFeedback {
		i--
		if m.DeleteFeedback {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetFirmwarePassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetFirmwarePassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetFirmwarePassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AllowOroms {
		i--
		if m.AllowOroms {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.NewPassword) > 0 {
		i -= len(m.NewPassword)
		copy(dAtA[i:], m.NewPassword)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.NewPassword)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentPassword) > 0 {
		i -= len(m.CurrentPassword)
		copy(dAtA[i:], m.CurrentPassword)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.CurrentPassword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyFirmwarePassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyFirmwarePassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyFirmwarePassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetAutoAdminPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAutoAdminPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetAutoAdminPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PasswordHash) > 0 {
		i -= len(m.PasswordHash)
		copy(dAtA[i:], m.PasswordHash)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PasswordHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Guid) > 0 {
		i -= len(m.Guid)
		copy(dAtA[i:], m.Guid)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Guid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleOSUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleOSUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleOSUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMdm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InstallAction) > 0 {
		i -= len(m.InstallAction)
		copy(dAtA[i:], m.InstallAction)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.InstallAction)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProductVersion) > 0 {
		i -= len(m.ProductVersion)
		copy(dAtA[i:], m.ProductVersion)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ProductVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProductKey) > 0 {
		i -= len(m.ProductKey)
		copy(dAtA[i:], m.ProductKey)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ProductKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleOSUpdateScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleOSUpdateScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleOSUpdateScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActiveNSExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveNSExtensions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveNSExtensions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FilterExtensionPoints) > 0 {
		for iNdEx := len(m.FilterExtensionPoints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FilterExtensionPoints[iNdEx])
			copy(dAtA[i:], m.FilterExtensionPoints[iNdEx])
			i = encodeVarintMdm(dAtA, i, uint64(len(m.FilterExtensionPoints[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RotateFileVaultKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RotateFileVaultKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RotateFileVaultKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReplyEncryptionCertificate) > 0 {
		i -= len(m.ReplyEncryptionCertificate)
		copy(dAtA[i:], m.ReplyEncryptionCertificate)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ReplyEncryptionCertificate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewCertificate) > 0 {
		i -= len(m.NewCertificate)
		copy(dAtA[i:], m.NewCertificate)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.NewCertificate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FilevaultUnlock != nil {
		{
			size, err := m.FilevaultUnlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMdm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyType) > 0 {
		i -= len(m.KeyType)
		copy(dAtA[i:], m.KeyType)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.KeyType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileVaultUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileVaultUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileVaultUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateKeyExportPassword) > 0 {
		i -= len(m.PrivateKeyExportPassword)
		copy(dAtA[i:], m.PrivateKeyExportPassword)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PrivateKeyExportPassword)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrivateKeyExport) > 0 {
		i -= len(m.PrivateKeyExport)
		copy(dAtA[i:], m.PrivateKeyExport)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PrivateKeyExport)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetBootstrapToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBootstrapToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBootstrapToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BootstrapToken) > 0 {
		i -= len(m.BootstrapToken)
		copy(dAtA[i:], m.BootstrapToken)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.BootstrapToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResultPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorChain) > 0 {
		for iNdEx := len(m.ErrorChain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErrorChain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMdm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CommandUuid) > 0 {
		i -= len(m.CommandUuid)
		copy(dAtA[i:], m.CommandUuid)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.CommandUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Udid) > 0 {
		i -= len(m.Udid)
		copy(dAtA[i:], m.Udid)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Udid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintMdm(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ErrorDomain) > 0 {
		i -= len(m.ErrorDomain)
		copy(dAtA[i:], m.ErrorDomain)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ErrorDomain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UsEnglishDescription) > 0 {
		i -= len(m.UsEnglishDescription)
		copy(dAtA[i:], m.UsEnglishDescription)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.UsEnglishDescription)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocalizedDescription) > 0 {
		i -= len(m.LocalizedDescription)
		copy(dAtA[i:], m.LocalizedDescription)
		i = encodeVarintMdm(dAtA, i, uint64(len(m.LocalizedDescription)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMdm(dAtA []byte, offset int, v uint64) int {
	offset -= sovMdm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommandPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommandUuid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestType)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command_InstallProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstallProfile != nil {
		l = m.InstallProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RemoveProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveProfile != nil {
		l = m.RemoveProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstallProvisioningProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstallProvisioningProfile != nil {
		l = m.InstallProvisioningProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RemoveProfisioningProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveProfisioningProfile != nil {
		l = m.RemoveProfisioningProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstalledApplicationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstalledApplicationList != nil {
		l = m.InstalledApplicationList.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_DeviceInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceInformation != nil {
		l = m.DeviceInformation.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_DeviceLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceLock != nil {
		l = m.DeviceLock.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ClearPasscode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClearPasscode != nil {
		l = m.ClearPasscode.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_EraseDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EraseDevice != nil {
		l = m.EraseDevice.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RequestMirroring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestMirroring != nil {
		l = m.RequestMirroring.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_Restrictions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Restrictions != nil {
		l = m.Restrictions.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_UnlockUserAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnlockUserAccount != nil {
		l = m.UnlockUserAccount.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_DeleteUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteUser != nil {
		l = m.DeleteUser.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_EnableLostMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableLostMode != nil {
		l = m.EnableLostMode.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstallApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstallApplication != nil {
		l = m.InstallApplication.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_AccountConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountConfiguration != nil {
		l = m.AccountConfiguration.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ApplyRedemptionCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyRedemptionCode != nil {
		l = m.ApplyRedemptionCode.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ManagedApplicationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagedApplicationList != nil {
		l = m.ManagedApplicationList.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RemoveApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveApplication != nil {
		l = m.RemoveApplication.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InviteToProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InviteToProgram != nil {
		l = m.InviteToProgram.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ValidataApplications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidataApplications != nil {
		l = m.ValidataApplications.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstallMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstallMedia != nil {
		l = m.InstallMedia.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RemoveMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveMedia != nil {
		l = m.RemoveMedia.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ManagedApplicationConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagedApplicationConfiguration != nil {
		l = m.ManagedApplicationConfiguration.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ManagedApplicationAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagedApplicationAttributes != nil {
		l = m.ManagedApplicationAttributes.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ManagedApplicationFeedback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagedApplicationFeedback != nil {
		l = m.ManagedApplicationFeedback.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_SetFirmwarePassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetFirmwarePassword != nil {
		l = m.SetFirmwarePassword.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_VerifyFirmwarePassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerifyFirmwarePassword != nil {
		l = m.VerifyFirmwarePassword.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_SetAutoAdminPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetAutoAdminPassword != nil {
		l = m.SetAutoAdminPassword.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ScheduleOsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduleOsUpdate != nil {
		l = m.ScheduleOsUpdate.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ScheduleOsUpdateScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduleOsUpdateScan != nil {
		l = m.ScheduleOsUpdateScan.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ActiveNsExtensions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNsExtensions != nil {
		l = m.ActiveNsExtensions.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RotateFilevaultKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RotateFilevaultKey != nil {
		l = m.RotateFilevaultKey.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstallEnterpriseApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstallEnterpriseApplication != nil {
		l = m.InstallEnterpriseApplication.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_SetBootstrapToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetBootstrapToken != nil {
		l = m.SetBootstrapToken.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *InstallProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallProvisioningProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProvisioningProfile)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveProvisioningProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstalledApplicationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.ManagedAppsOnly {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, s := range m.Queries {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearPasscode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UnlockToken)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pin)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EraseDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pin)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.PreserveDataPlan {
		n += 2
	}
	if m.DisallowProximitySetup {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestMirroring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.DestinationDeviceId)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ScanTime)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Restrictions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProfileRestrictions {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnlockUserAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ForceDeletion {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnableLostMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Footnote)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItunesStoreId != 0 {
		n += 1 + sovMdm(uint64(m.ItunesStoreId))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ManifestUrl)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ManagementFlags != 0 {
		n += 1 + sovMdm(uint64(m.ManagementFlags))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ChangeManagementState)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallApplicationOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PurchaseMethod != 0 {
		n += 1 + sovMdm(uint64(m.PurchaseMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallApplicationConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallApplicationAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallEnterpriseApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Manifest != nil {
		l = m.Manifest.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ManifestUrl)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if len(m.ManifestUrlPinningCerts) > 0 {
		for _, b := range m.ManifestUrlPinningCerts {
			l = len(b)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.PinningRevocationCheckRequired {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Manifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManifestItems) > 0 {
		for _, e := range m.ManifestItems {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManifestItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Md5Size != 0 {
		n += 1 + sovMdm(uint64(m.Md5Size))
	}
	if len(m.Md5S) > 0 {
		for _, s := range m.Md5S {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Sha256Size != 0 {
		n += 1 + sovMdm(uint64(m.Sha256Size))
	}
	if len(m.Sha256S) > 0 {
		for _, s := range m.Sha256S {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BundleIdentifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.BundleVersion)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.SizeInBytes != 0 {
		n += 1 + sovMdm(uint64(m.SizeInBytes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BundleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BundleIdentifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.BundleVersion)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplyRedemptionCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.RedemptionCode)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManagedApplicationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteToProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.InvitationUrl)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateApplications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipPrimarySetupAccountCreation {
		n += 2
	}
	if m.SetPrimarySetupAccountAsRegularUser {
		n += 2
	}
	if len(m.AutoSetupAdminAccounts) > 0 {
		for _, e := range m.AutoSetupAdminAccounts {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.DontAutoPopulatePrimaryAccountInfo {
		n += 2
	}
	if m.LockPrimaryAccountInfo {
		n += 2
	}
	l = len(m.PrimaryAccountFullName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PrimaryAccountUserName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AutoSetupAdminAccounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Hidden {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstallMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItunesStoreId != 0 {
		n += 1 + sovMdm(uint64(m.ItunesStoreId))
	}
	l = len(m.MediaUrl)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.MediaType)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MediaType)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ItunesStoreId != 0 {
		n += 1 + sovMdm(uint64(m.ItunesStoreId))
	}
	l = len(m.PersistentId)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.DeviceName != nil {
		l = m.DeviceName.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Hostname != nil {
		l = m.Hostname.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.VoiceRoaming != nil {
		l = m.VoiceRoaming.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.PersonalHotspot != nil {
		l = m.PersonalHotspot.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Wallpaper != nil {
		l = m.Wallpaper.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.DataRoaming != nil {
		l = m.DataRoaming.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Bluetooth != nil {
		l = m.Bluetooth.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ApplicationAttributes != nil {
		l = m.ApplicationAttributes.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.MdmOptions != nil {
		l = m.MdmOptions.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.PasscodeLockGracePeriod != nil {
		l = m.PasscodeLockGracePeriod.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.MaximumResidentUsers != nil {
		l = m.MaximumResidentUsers.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.DiagnosticSubmission != nil {
		l = m.DiagnosticSubmission.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.AppAnalytics != nil {
		l = m.AppAnalytics.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ApplicationConfiguration != nil {
		l = m.ApplicationConfiguration.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoiceRoamingSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersonalHotspotSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WallpaperSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Where != 0 {
		n += 1 + sovMdm(uint64(m.Where))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataRoamingSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BluetoothSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationAttributesSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ApplicationAttributes != nil {
		l = m.ApplicationAttributes.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationConfigurationSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ConfigurationDictionaryData)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpnUuid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceNameSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostnameSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MDMOptionsSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MdmOptions != nil {
		l = m.MdmOptions.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MDMOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivationLockAllowedWhileSupervised {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PasscodeLockGracePeriodSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PasscodeLockGracePeriod != 0 {
		n += 1 + sovMdm(uint64(m.PasscodeLockGracePeriod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MaximumResidentUsersSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaximumResidentUsers != 0 {
		n += 1 + sovMdm(uint64(m.MaximumResidentUsers))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiagnosticSubmissionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppAnalyticsSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManagedApplicationConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManagedApplicationAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManagedApplicationFeedback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.DeleteFeedback {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetFirmwarePassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentPassword)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.AllowOroms {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VerifyFirmwarePassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAutoAdminPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Guid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScheduleOSUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProductKey)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ProductVersion)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.InstallAction)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScheduleOSUpdateScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Force {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveNSExtensions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FilterExtensionPoints) > 0 {
		for _, s := range m.FilterExtensionPoints {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RotateFileVaultKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyType)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.FilevaultUnlock != nil {
		l = m.FilevaultUnlock.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.NewCertificate)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ReplyEncryptionCertificate)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileVaultUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PrivateKeyExport)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PrivateKeyExportPassword)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBootstrapToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BootstrapToken)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResultPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Udid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.CommandUuid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if len(m.ErrorChain) > 0 {
		for _, e := range m.ErrorChain {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ErrorChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalizedDescription)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.UsEnglishDescription)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ErrorDomain)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovMdm(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMdm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMdm(x uint64) (n int) {
	return sovMdm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommandPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallProfile{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RemoveProfile{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallProvisioningProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallProvisioningProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallProvisioningProfile{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveProfisioningProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveProvisioningProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RemoveProfisioningProfile{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstalledApplicationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstalledApplicationList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstalledApplicationList{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeviceInformation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_DeviceInformation{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceLock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeviceLock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_DeviceLock{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearPasscode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearPasscode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ClearPasscode{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraseDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EraseDevice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_EraseDevice{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMirroring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestMirroring{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RequestMirroring{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Restrictions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_Restrictions{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockUserAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnlockUserAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_UnlockUserAccount{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_DeleteUser{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLostMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnableLostMode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_EnableLostMode{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallApplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallApplication{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallApplication{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccountConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_AccountConfiguration{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyRedemptionCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApplyRedemptionCode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ApplyRedemptionCode{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedApplicationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ManagedApplicationList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ManagedApplicationList{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveApplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveApplication{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RemoveApplication{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteToProgram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InviteToProgram{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InviteToProgram{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidataApplications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValidateApplications{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ValidataApplications{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallMedia", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallMedia{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallMedia{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveMedia", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveMedia{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RemoveMedia{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Settings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_Settings{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedApplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ManagedApplicationConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ManagedApplicationConfiguration{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedApplicationAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ManagedApplicationAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ManagedApplicationAttributes{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedApplicationFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ManagedApplicationFeedback{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ManagedApplicationFeedback{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetFirmwarePassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetFirmwarePassword{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_SetFirmwarePassword{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyFirmwarePassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VerifyFirmwarePassword{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_VerifyFirmwarePassword{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetAutoAdminPassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetAutoAdminPassword{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_SetAutoAdminPassword{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleOsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduleOSUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ScheduleOsUpdate{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleOsUpdateScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduleOSUpdateScan{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ScheduleOsUpdateScan{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNsExtensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveNSExtensions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ActiveNsExtensions{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotateFilevaultKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RotateFileVaultKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RotateFilevaultKey{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallEnterpriseApplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallEnterpriseApplication{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallEnterpriseApplication{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetBootstrapToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetBootstrapToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_SetBootstrapToken{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallProvisioningProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallProvisioningProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallProvisioningProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisioningProfile", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisioningProfile = append(m.ProvisioningProfile[:0], dAtA[iNdEx:postIndex]...)
			if m.ProvisioningProfile == nil {
				m.ProvisioningProfile = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveProvisioningProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveProvisioningProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveProvisioningProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstalledApplicationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstalledApplicationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstalledApplicationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedAppsOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ManagedAppsOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearPasscode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearPasscode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearPasscode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockToken = append(m.UnlockToken[:0], dAtA[iNdEx:postIndex]...)
			if m.UnlockToken == nil {
				m.UnlockToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EraseDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EraseDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EraseDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreserveDataPlan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreserveDataPlan = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowProximitySetup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisallowProximitySetup = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMirroring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMirroring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMirroring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Restrictions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Restrictions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Restrictions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileRestrictions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProfileRestrictions = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockUserAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockUserAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockUserAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDeletion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDeletion = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableLostMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableLostMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableLostMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Footnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Footnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesStoreId", wireType)
			}
			m.ItunesStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItunesStoreId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &InstallApplicationOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFlags", wireType)
			}
			m.ManagementFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagementFlags |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &InstallApplicationConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &InstallApplicationAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeManagementState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeManagementState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplicationOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplicationOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplicationOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseMethod", wireType)
			}
			m.PurchaseMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseMethod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplicationConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplicationConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplicationConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplicationAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplicationAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplicationAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallEnterpriseApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallEnterpriseApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallEnterpriseApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Manifest == nil {
				m.Manifest = &Manifest{}
			}
			if err := m.Manifest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestUrlPinningCerts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestUrlPinningCerts = append(m.ManifestUrlPinningCerts, make([]byte, postIndex-iNdEx))
			copy(m.ManifestUrlPinningCerts[len(m.ManifestUrlPinningCerts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinningRevocationCheckRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinningRevocationCheckRequired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestItems = append(m.ManifestItems, &ManifestItem{})
			if err := m.ManifestItems[len(m.ManifestItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManifestItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5Size", wireType)
			}
			m.Md5Size = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Md5Size |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5S = append(m.Md5S, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Size", wireType)
			}
			m.Sha256Size = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sha256Size |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256S = append(m.Sha256S, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BundleInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BundleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BundleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BundleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyRedemptionCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyRedemptionCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyRedemptionCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagedApplicationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagedApplicationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagedApplicationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteToProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteToProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteToProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateApplications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateApplications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateApplications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipPrimarySetupAccountCreation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipPrimarySetupAccountCreation = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetPrimarySetupAccountAsRegularUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetPrimarySetupAccountAsRegularUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSetupAdminAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoSetupAdminAccounts = append(m.AutoSetupAdminAccounts, &AutoSetupAdminAccounts{})
			if err := m.AutoSetupAdminAccounts[len(m.AutoSetupAdminAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontAutoPopulatePrimaryAccountInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DontAutoPopulatePrimaryAccountInfo = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockPrimaryAccountInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LockPrimaryAccountInfo = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAccountFullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAccountFullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAccountUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAccountUserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoSetupAdminAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoSetupAdminAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoSetupAdminAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = append(m.PasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PasswordHash == nil {
				m.PasswordHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesStoreId", wireType)
			}
			m.ItunesStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItunesStoreId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesStoreId", wireType)
			}
			m.ItunesStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItunesStoreId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersistentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PersistentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, &Setting{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceName == nil {
				m.DeviceName = &DeviceNameSetting{}
			}
			if err := m.DeviceName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hostname == nil {
				m.Hostname = &HostnameSetting{}
			}
			if err := m.Hostname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceRoaming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoiceRoaming == nil {
				m.VoiceRoaming = &VoiceRoamingSetting{}
			}
			if err := m.VoiceRoaming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalHotspot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersonalHotspot == nil {
				m.PersonalHotspot = &PersonalHotspotSetting{}
			}
			if err := m.PersonalHotspot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallpaper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wallpaper == nil {
				m.Wallpaper = &WallpaperSetting{}
			}
			if err := m.Wallpaper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRoaming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataRoaming == nil {
				m.DataRoaming = &DataRoamingSetting{}
			}
			if err := m.DataRoaming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bluetooth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bluetooth == nil {
				m.Bluetooth = &BluetoothSetting{}
			}
			if err := m.Bluetooth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationAttributes == nil {
				m.ApplicationAttributes = &ApplicationAttributesSetting{}
			}
			if err := m.ApplicationAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdmOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MdmOptions == nil {
				m.MdmOptions = &MDMOptionsSetting{}
			}
			if err := m.MdmOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasscodeLockGracePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PasscodeLockGracePeriod == nil {
				m.PasscodeLockGracePeriod = &PasscodeLockGracePeriodSetting{}
			}
			if err := m.PasscodeLockGracePeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumResidentUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaximumResidentUsers == nil {
				m.MaximumResidentUsers = &MaximumResidentUsersSetting{}
			}
			if err := m.MaximumResidentUsers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiagnosticSubmission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiagnosticSubmission == nil {
				m.DiagnosticSubmission = &DiagnosticSubmissionSetting{}
			}
			if err := m.DiagnosticSubmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppAnalytics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppAnalytics == nil {
				m.AppAnalytics = &AppAnalyticsSetting{}
			}
			if err := m.AppAnalytics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationConfiguration == nil {
				m.ApplicationConfiguration = &ApplicationConfigurationSetting{}
			}
			if err := m.ApplicationConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoiceRoamingSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoiceRoamingSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoiceRoamingSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalHotspotSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalHotspotSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalHotspotSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallpaperSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallpaperSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallpaperSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			m.Where = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Where |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRoamingSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRoamingSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRoamingSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BluetoothSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BluetoothSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BluetoothSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationAttributesSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationAttributesSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationAttributesSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationAttributes == nil {
				m.ApplicationAttributes = &ApplicationAttributes{}
			}
			if err := m.ApplicationAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationConfigurationSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationConfigurationSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationConfigurationSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationDictionaryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigurationDictionaryData = append(m.ConfigurationDictionaryData[:0], dAtA[iNdEx:postIndex]...)
			if m.ConfigurationDictionaryData == nil {
				m.ConfigurationDictionaryData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpnUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpnUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceNameSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceNameSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceNameSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostnameSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostnameSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostnameSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MDMOptionsSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MDMOptionsSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MDMOptionsSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdmOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MdmOptions == nil {
				m.MdmOptions = &MDMOptions{}
			}
			if err := m.MdmOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MDMOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MDMOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MDMOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationLockAllowedWhileSupervised", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivationLockAllowedWhileSupervised = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasscodeLockGracePeriodSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasscodeLockGracePeriodSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasscodeLockGracePeriodSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasscodeLockGracePeriod", wireType)
			}
			m.PasscodeLockGracePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PasscodeLockGracePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaximumResidentUsersSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaximumResidentUsersSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaximumResidentUsersSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumResidentUsers", wireType)
			}
			m.MaximumResidentUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumResidentUsers |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiagnosticSubmissionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiagnosticSubmissionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiagnosticSubmissionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppAnalyticsSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppAnalyticsSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppAnalyticsSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagedApplicationConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagedApplicationConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagedApplicationConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagedApplicationAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagedApplicationAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagedApplicationAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagedApplicationFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagedApplicationFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagedApplicationFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFeedback", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteFeedback = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetFirmwarePassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetFirmwarePassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetFirmwarePassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowOroms", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowOroms = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyFirmwarePassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyFirmwarePassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyFirmwarePassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAutoAdminPassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAutoAdminPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAutoAdminPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = append(m.PasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PasswordHash == nil {
				m.PasswordHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleOSUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleOSUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleOSUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &Update{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleOSUpdateScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleOSUpdateScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleOSUpdateScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveNSExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveNSExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveNSExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterExtensionPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterExtensionPoints = append(m.FilterExtensionPoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RotateFileVaultKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RotateFileVaultKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RotateFileVaultKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilevaultUnlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FilevaultUnlock == nil {
				m.FilevaultUnlock = &FileVaultUnlock{}
			}
			if err := m.FilevaultUnlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCertificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCertificate = append(m.NewCertificate[:0], dAtA[iNdEx:postIndex]...)
			if m.NewCertificate == nil {
				m.NewCertificate = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyEncryptionCertificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyEncryptionCertificate = append(m.ReplyEncryptionCertificate[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyEncryptionCertificate == nil {
				m.ReplyEncryptionCertificate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileVaultUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileVaultUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileVaultUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeyExport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKeyExport = append(m.PrivateKeyExport[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateKeyExport == nil {
				m.PrivateKeyExport = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeyExportPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKeyExportPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBootstrapToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBootstrapToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBootstrapToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Udid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorChain = append(m.ErrorChain, &ErrorChain{})
			if err := m.ErrorChain[len(m.ErrorChain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalizedDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalizedDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsEnglishDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsEnglishDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMdm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMdm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMdm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMdm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMdm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMdm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMdm = fmt.Errorf("proto: unexpected end of group")
)
